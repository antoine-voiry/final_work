
XXcontroller_v1_5b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000011ae  00001242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800102  00800102  00001244  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000037a  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ec  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022b  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e4a  00000000  00000000  000020f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f5  00000000  00000000  0000359a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_2>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ea       	ldi	r30, 0xAE	; 174
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 36       	cpi	r26, 0x62	; 98
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 83 08 	call	0x1106	; 0x1106 <main>
      9e:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
void delay_ms(uint16_t time);


// RX_ROLL
ISR(PCINT2_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
	if ( RX_ROLL )			// rising
      b8:	49 9b       	sbis	0x09, 1	; 9
      ba:	09 c0       	rjmp	.+18     	; 0xce <__vector_5+0x28>
	{
		RxChannel1Start = TCNT1;
      bc:	80 91 84 00 	lds	r24, 0x0084
      c0:	90 91 85 00 	lds	r25, 0x0085
      c4:	90 93 46 01 	sts	0x0146, r25
      c8:	80 93 45 01 	sts	0x0145, r24
      cc:	13 c0       	rjmp	.+38     	; 0xf4 <__vector_5+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 51 01 	sts	0x0151, r24
		RxChannel1 = TCNT1 - RxChannel1Start;
      d4:	80 91 84 00 	lds	r24, 0x0084
      d8:	90 91 85 00 	lds	r25, 0x0085
      dc:	20 91 45 01 	lds	r18, 0x0145
      e0:	30 91 46 01 	lds	r19, 0x0146
      e4:	82 1b       	sub	r24, r18
      e6:	93 0b       	sbc	r25, r19
      e8:	90 93 53 01 	sts	0x0153, r25
      ec:	80 93 52 01 	sts	0x0152, r24
		RxChannelsUpdatingFlag = 0;
      f0:	10 92 51 01 	sts	0x0151, r1
	}
}
      f4:	9f 91       	pop	r25
      f6:	8f 91       	pop	r24
      f8:	3f 91       	pop	r19
      fa:	2f 91       	pop	r18
      fc:	0f 90       	pop	r0
      fe:	0f be       	out	0x3f, r0	; 63
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <__vector_1>:

// RX_PITCH
ISR(INT0_vect)
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	if (RX_PITCH)		
     118:	4a 9b       	sbis	0x09, 2	; 9
     11a:	09 c0       	rjmp	.+18     	; 0x12e <__vector_1+0x28>
	{
		RxChannel2Start = TCNT1;
     11c:	80 91 84 00 	lds	r24, 0x0084
     120:	90 91 85 00 	lds	r25, 0x0085
     124:	90 93 25 01 	sts	0x0125, r25
     128:	80 93 24 01 	sts	0x0124, r24
     12c:	13 c0       	rjmp	.+38     	; 0x154 <__vector_1+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	80 93 51 01 	sts	0x0151, r24
		RxChannel2 = TCNT1 - RxChannel2Start;
     134:	80 91 84 00 	lds	r24, 0x0084
     138:	90 91 85 00 	lds	r25, 0x0085
     13c:	20 91 24 01 	lds	r18, 0x0124
     140:	30 91 25 01 	lds	r19, 0x0125
     144:	82 1b       	sub	r24, r18
     146:	93 0b       	sbc	r25, r19
     148:	90 93 3b 01 	sts	0x013B, r25
     14c:	80 93 3a 01 	sts	0x013A, r24
		RxChannelsUpdatingFlag = 0;
     150:	10 92 51 01 	sts	0x0151, r1
	}
}
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	3f 91       	pop	r19
     15a:	2f 91       	pop	r18
     15c:	0f 90       	pop	r0
     15e:	0f be       	out	0x3f, r0	; 63
     160:	0f 90       	pop	r0
     162:	1f 90       	pop	r1
     164:	18 95       	reti

00000166 <__vector_2>:

// RX_COLL
ISR(INT1_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
	if (RX_COLL)		
     178:	4b 9b       	sbis	0x09, 3	; 9
     17a:	09 c0       	rjmp	.+18     	; 0x18e <__vector_2+0x28>
	{
		RxChannel3Start = TCNT1;
     17c:	80 91 84 00 	lds	r24, 0x0084
     180:	90 91 85 00 	lds	r25, 0x0085
     184:	90 93 31 01 	sts	0x0131, r25
     188:	80 93 30 01 	sts	0x0130, r24
     18c:	13 c0       	rjmp	.+38     	; 0x1b4 <__vector_2+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 51 01 	sts	0x0151, r24
		RxChannel3 = TCNT1 - RxChannel3Start;
     194:	80 91 84 00 	lds	r24, 0x0084
     198:	90 91 85 00 	lds	r25, 0x0085
     19c:	20 91 30 01 	lds	r18, 0x0130
     1a0:	30 91 31 01 	lds	r19, 0x0131
     1a4:	82 1b       	sub	r24, r18
     1a6:	93 0b       	sbc	r25, r19
     1a8:	90 93 50 01 	sts	0x0150, r25
     1ac:	80 93 4f 01 	sts	0x014F, r24
		RxChannelsUpdatingFlag = 0;
     1b0:	10 92 51 01 	sts	0x0151, r1
	}
}
     1b4:	9f 91       	pop	r25
     1b6:	8f 91       	pop	r24
     1b8:	3f 91       	pop	r19
     1ba:	2f 91       	pop	r18
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	0f 90       	pop	r0
     1c2:	1f 90       	pop	r1
     1c4:	18 95       	reti

000001c6 <__vector_3>:

// RX_YAW
ISR(PCINT0_vect)
{
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	0f 92       	push	r0
     1ce:	11 24       	eor	r1, r1
     1d0:	2f 93       	push	r18
     1d2:	3f 93       	push	r19
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
	if ( RX_YAW )			// rising
     1d8:	1f 9b       	sbis	0x03, 7	; 3
     1da:	09 c0       	rjmp	.+18     	; 0x1ee <__vector_3+0x28>
	{
		RxChannel4Start = TCNT1;
     1dc:	80 91 84 00 	lds	r24, 0x0084
     1e0:	90 91 85 00 	lds	r25, 0x0085
     1e4:	90 93 4e 01 	sts	0x014E, r25
     1e8:	80 93 4d 01 	sts	0x014D, r24
     1ec:	13 c0       	rjmp	.+38     	; 0x214 <__vector_3+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	80 93 51 01 	sts	0x0151, r24
		RxChannel4 = TCNT1 - RxChannel4Start;
     1f4:	80 91 84 00 	lds	r24, 0x0084
     1f8:	90 91 85 00 	lds	r25, 0x0085
     1fc:	20 91 4d 01 	lds	r18, 0x014D
     200:	30 91 4e 01 	lds	r19, 0x014E
     204:	82 1b       	sub	r24, r18
     206:	93 0b       	sbc	r25, r19
     208:	90 93 27 01 	sts	0x0127, r25
     20c:	80 93 26 01 	sts	0x0126, r24
		RxChannelsUpdatingFlag = 0;
     210:	10 92 51 01 	sts	0x0151, r1
	}
}
     214:	9f 91       	pop	r25
     216:	8f 91       	pop	r24
     218:	3f 91       	pop	r19
     21a:	2f 91       	pop	r18
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <Init_ADC>:
	if (Armed) output_motor_ppm();		// output ESC signal
}

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     226:	8f e3       	ldi	r24, 0x3F	; 63
     228:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     22c:	10 92 7b 00 	sts	0x007B, r1
}
     230:	08 95       	ret

00000232 <ReadGainPots>:
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     238:	86 ec       	ldi	r24, 0xC6	; 198
     23a:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     23e:	80 91 7a 00 	lds	r24, 0x007A
     242:	86 fd       	sbrc	r24, 6
     244:	fc cf       	rjmp	.-8      	; 0x23e <ReadGainPots+0xc>
}

void ReadGainPots(void)
{
	read_adc( 3 );			// read roll gain ADC3
	GainInADC[ROLL] = ADCL;
     246:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[ROLL] += ((uint16_t) ADCH <<8);
     24a:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[ROLL] = 1024 - GainInADC[ROLL];
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	94 e0       	ldi	r25, 0x04	; 4
     252:	82 1b       	sub	r24, r18
     254:	91 09       	sbc	r25, r1
     256:	34 2f       	mov	r19, r20
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	82 1b       	sub	r24, r18
     25c:	93 0b       	sbc	r25, r19
     25e:	90 93 48 01 	sts	0x0148, r25
     262:	80 93 47 01 	sts	0x0147, r24
	GainIn[ROLL] = GainInADC[ROLL] / 10;
     266:	6a e0       	ldi	r22, 0x0A	; 10
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	0e 94 88 08 	call	0x1110	; 0x1110 <__udivmodhi4>
     26e:	70 93 35 01 	sts	0x0135, r23
     272:	60 93 34 01 	sts	0x0134, r22
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     27c:	86 ec       	ldi	r24, 0xC6	; 198
     27e:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     282:	80 91 7a 00 	lds	r24, 0x007A
     286:	86 fd       	sbrc	r24, 6
     288:	fc cf       	rjmp	.-8      	; 0x282 <ReadGainPots+0x50>
	GainInADC[ROLL] += ((uint16_t) ADCH <<8);
	GainInADC[ROLL] = 1024 - GainInADC[ROLL];
	GainIn[ROLL] = GainInADC[ROLL] / 10;

	read_adc( 4 );			// read pitch gain ADC4
	GainInADC[PITCH] = ADCL;
     28a:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[PITCH] += ((uint16_t) ADCH <<8);
     28e:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[PITCH] = 1024 - GainInADC[PITCH];
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	94 e0       	ldi	r25, 0x04	; 4
     296:	82 1b       	sub	r24, r18
     298:	91 09       	sbc	r25, r1
     29a:	34 2f       	mov	r19, r20
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	82 1b       	sub	r24, r18
     2a0:	93 0b       	sbc	r25, r19
     2a2:	90 93 4a 01 	sts	0x014A, r25
     2a6:	80 93 49 01 	sts	0x0149, r24
	GainIn[PITCH] = GainInADC[PITCH] / 10;
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	0e 94 88 08 	call	0x1110	; 0x1110 <__udivmodhi4>
     2b2:	70 93 37 01 	sts	0x0137, r23
     2b6:	60 93 36 01 	sts	0x0136, r22
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     2c0:	86 ec       	ldi	r24, 0xC6	; 198
     2c2:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     2c6:	80 91 7a 00 	lds	r24, 0x007A
     2ca:	86 fd       	sbrc	r24, 6
     2cc:	fc cf       	rjmp	.-8      	; 0x2c6 <ReadGainPots+0x94>
	GainInADC[PITCH] += ((uint16_t) ADCH <<8);
	GainInADC[PITCH] = 1024 - GainInADC[PITCH];
	GainIn[PITCH] = GainInADC[PITCH] / 10;

	read_adc( 5 );			// read yaw gain ADC5
	GainInADC[YAW] = ADCL;
     2ce:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[YAW] += ((uint16_t) ADCH <<8);
     2d2:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[YAW] = 1024 - GainInADC[YAW];
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	94 e0       	ldi	r25, 0x04	; 4
     2da:	82 1b       	sub	r24, r18
     2dc:	91 09       	sbc	r25, r1
     2de:	34 2f       	mov	r19, r20
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	82 1b       	sub	r24, r18
     2e4:	93 0b       	sbc	r25, r19
     2e6:	90 93 4c 01 	sts	0x014C, r25
     2ea:	80 93 4b 01 	sts	0x014B, r24
	GainIn[YAW] = GainInADC[YAW] / 10;
     2ee:	6a e0       	ldi	r22, 0x0A	; 10
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	0e 94 88 08 	call	0x1110	; 0x1110 <__udivmodhi4>
     2f6:	70 93 39 01 	sts	0x0139, r23
     2fa:	60 93 38 01 	sts	0x0138, r22
}
     2fe:	08 95       	ret

00000300 <read_adc>:

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     300:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     304:	86 ec       	ldi	r24, 0xC6	; 198
     306:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     30a:	80 91 7a 00 	lds	r24, 0x007A
     30e:	86 fd       	sbrc	r24, 6
     310:	fc cf       	rjmp	.-8      	; 0x30a <read_adc+0xa>
}
     312:	08 95       	ret

00000314 <ReadGyros>:

void ReadGyros(bool calibrate)
{
     314:	48 2f       	mov	r20, r24
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     31c:	86 ec       	ldi	r24, 0xC6	; 198
     31e:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     322:	80 91 7a 00 	lds	r24, 0x007A
     326:	86 fd       	sbrc	r24, 6
     328:	fc cf       	rjmp	.-8      	; 0x322 <ReadGyros+0xe>
}

void ReadGyros(bool calibrate)
{
	read_adc( 2 );			// read roll gyro ADC2
	gyroADC[ROLL] = ADCL;
     32a:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
     32e:	20 91 79 00 	lds	r18, 0x0079
     332:	92 2f       	mov	r25, r18
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	bc 01       	movw	r22, r24
     338:	63 0f       	add	r22, r19
     33a:	71 1d       	adc	r23, r1
     33c:	9b 01       	movw	r18, r22
     33e:	70 93 1c 01 	sts	0x011C, r23
     342:	60 93 1b 01 	sts	0x011B, r22
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output
     346:	44 23       	and	r20, r20
     348:	51 f4       	brne	.+20     	; 0x35e <ReadGyros+0x4a>
     34a:	80 91 02 01 	lds	r24, 0x0102
     34e:	90 91 03 01 	lds	r25, 0x0103
     352:	28 1b       	sub	r18, r24
     354:	39 0b       	sbc	r19, r25
     356:	30 93 1c 01 	sts	0x011C, r19
     35a:	20 93 1b 01 	sts	0x011B, r18
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     364:	86 ec       	ldi	r24, 0xC6	; 198
     366:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     36a:	80 91 7a 00 	lds	r24, 0x007A
     36e:	86 fd       	sbrc	r24, 6
     370:	fc cf       	rjmp	.-8      	; 0x36a <ReadGyros+0x56>
	gyroADC[ROLL] = ADCL;
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output

	read_adc( 1 );			// read pitch gyro ADC1
	gyroADC[PITCH] = ADCL;
     372:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[PITCH] += ((uint16_t) ADCH <<8);
     376:	20 91 79 00 	lds	r18, 0x0079
     37a:	92 2f       	mov	r25, r18
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	bc 01       	movw	r22, r24
     380:	63 0f       	add	r22, r19
     382:	71 1d       	adc	r23, r1
     384:	9b 01       	movw	r18, r22
     386:	70 93 1e 01 	sts	0x011E, r23
     38a:	60 93 1d 01 	sts	0x011D, r22
	if (!calibrate) gyroADC[PITCH] -= gyroZero[PITCH];				//remove offset from gyro output
     38e:	44 23       	and	r20, r20
     390:	51 f4       	brne	.+20     	; 0x3a6 <ReadGyros+0x92>
     392:	80 91 04 01 	lds	r24, 0x0104
     396:	90 91 05 01 	lds	r25, 0x0105
     39a:	28 1b       	sub	r18, r24
     39c:	39 0b       	sbc	r19, r25
     39e:	30 93 1e 01 	sts	0x011E, r19
     3a2:	20 93 1d 01 	sts	0x011D, r18
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     3a6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     3aa:	86 ec       	ldi	r24, 0xC6	; 198
     3ac:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     3b0:	80 91 7a 00 	lds	r24, 0x007A
     3b4:	86 fd       	sbrc	r24, 6
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <ReadGyros+0x9c>

#ifdef EXTERNAL_YAW_GYRO
	gyroADC[YAW] = 0;
#else
	read_adc( 0 );			// read yaw gyro ADC0
	gyroADC[YAW] = ADCL;
     3b8:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[YAW] += ((uint16_t) ADCH <<8);
     3bc:	20 91 79 00 	lds	r18, 0x0079
     3c0:	92 2f       	mov	r25, r18
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	bc 01       	movw	r22, r24
     3c6:	63 0f       	add	r22, r19
     3c8:	71 1d       	adc	r23, r1
     3ca:	9b 01       	movw	r18, r22
     3cc:	70 93 20 01 	sts	0x0120, r23
     3d0:	60 93 1f 01 	sts	0x011F, r22
	if (!calibrate) gyroADC[YAW]	-= gyroZero[YAW];				//remove offset from gyro output
     3d4:	44 23       	and	r20, r20
     3d6:	51 f4       	brne	.+20     	; 0x3ec <ReadGyros+0xd8>
     3d8:	80 91 06 01 	lds	r24, 0x0106
     3dc:	90 91 07 01 	lds	r25, 0x0107
     3e0:	28 1b       	sub	r18, r24
     3e2:	39 0b       	sbc	r19, r25
     3e4:	30 93 20 01 	sts	0x0120, r19
     3e8:	20 93 1f 01 	sts	0x011F, r18
     3ec:	08 95       	ret

000003ee <CalibrateGyros>:
#endif
}

void CalibrateGyros(void)
{
     3ee:	1f 93       	push	r17
	uint8_t i;

	ReadGainPots();	// about time we did this !
     3f0:	0e 94 19 01 	call	0x232	; 0x232 <ReadGainPots>

	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
     3f4:	10 92 03 01 	sts	0x0103, r1
     3f8:	10 92 02 01 	sts	0x0102, r1
	gyroZero[PITCH] = 0;	
     3fc:	10 92 05 01 	sts	0x0105, r1
     400:	10 92 04 01 	sts	0x0104, r1
	gyroZero[YAW] 	= 0;
     404:	10 92 07 01 	sts	0x0107, r1
     408:	10 92 06 01 	sts	0x0106, r1
     40c:	10 e0       	ldi	r17, 0x00	; 0

	for (i=0;i<32;i++)
	{
		ReadGyros(true);
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 8a 01 	call	0x314	; 0x314 <ReadGyros>
	
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
     414:	60 91 02 01 	lds	r22, 0x0102
     418:	70 91 03 01 	lds	r23, 0x0103
     41c:	80 91 1b 01 	lds	r24, 0x011B
     420:	90 91 1c 01 	lds	r25, 0x011C
     424:	68 0f       	add	r22, r24
     426:	79 1f       	adc	r23, r25
     428:	70 93 03 01 	sts	0x0103, r23
     42c:	60 93 02 01 	sts	0x0102, r22
		gyroZero[PITCH] += gyroADC[PITCH];	
     430:	40 91 04 01 	lds	r20, 0x0104
     434:	50 91 05 01 	lds	r21, 0x0105
     438:	80 91 1d 01 	lds	r24, 0x011D
     43c:	90 91 1e 01 	lds	r25, 0x011E
     440:	48 0f       	add	r20, r24
     442:	59 1f       	adc	r21, r25
     444:	50 93 05 01 	sts	0x0105, r21
     448:	40 93 04 01 	sts	0x0104, r20
		gyroZero[YAW] 	+= gyroADC[YAW];
     44c:	20 91 06 01 	lds	r18, 0x0106
     450:	30 91 07 01 	lds	r19, 0x0107
     454:	80 91 1f 01 	lds	r24, 0x011F
     458:	90 91 20 01 	lds	r25, 0x0120
     45c:	28 0f       	add	r18, r24
     45e:	39 1f       	adc	r19, r25
     460:	30 93 07 01 	sts	0x0107, r19
     464:	20 93 06 01 	sts	0x0106, r18
	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
	gyroZero[PITCH] = 0;	
	gyroZero[YAW] 	= 0;

	for (i=0;i<32;i++)
     468:	1f 5f       	subi	r17, 0xFF	; 255
     46a:	10 32       	cpi	r17, 0x20	; 32
     46c:	81 f6       	brne	.-96     	; 0x40e <CalibrateGyros+0x20>
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
		gyroZero[PITCH] += gyroADC[PITCH];	
		gyroZero[YAW] 	+= gyroADC[YAW];
	}

	gyroZero[ROLL] 	= (gyroZero[ROLL] >> 5);						
     46e:	e5 e0       	ldi	r30, 0x05	; 5
     470:	75 95       	asr	r23
     472:	67 95       	ror	r22
     474:	ea 95       	dec	r30
     476:	e1 f7       	brne	.-8      	; 0x470 <CalibrateGyros+0x82>
     478:	70 93 03 01 	sts	0x0103, r23
     47c:	60 93 02 01 	sts	0x0102, r22
	gyroZero[PITCH] = (gyroZero[PITCH] >> 5);
     480:	95 e0       	ldi	r25, 0x05	; 5
     482:	55 95       	asr	r21
     484:	47 95       	ror	r20
     486:	9a 95       	dec	r25
     488:	e1 f7       	brne	.-8      	; 0x482 <CalibrateGyros+0x94>
     48a:	50 93 05 01 	sts	0x0105, r21
     48e:	40 93 04 01 	sts	0x0104, r20
	gyroZero[YAW] 	= (gyroZero[YAW] >> 5);
     492:	85 e0       	ldi	r24, 0x05	; 5
     494:	35 95       	asr	r19
     496:	27 95       	ror	r18
     498:	8a 95       	dec	r24
     49a:	e1 f7       	brne	.-8      	; 0x494 <CalibrateGyros+0xa6>
     49c:	30 93 07 01 	sts	0x0107, r19
     4a0:	20 93 06 01 	sts	0x0106, r18

	GyroCalibrated = true;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 23 01 	sts	0x0123, r24
	LowpassOutServo[0]		= 50;					// Center
	LowpassOutServo[1]		= 50;					// Center
#elif defined(TRI_COPTER)
	LowpassOutYaw			= 50;					// Center
#endif
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <RxGetChannels>:
//--- Get and scale RX channel inputs ---
void RxGetChannels(void)
{
	static int16_t RxChannel;

	while ( RxChannelsUpdatingFlag );
     4ae:	80 91 51 01 	lds	r24, 0x0151
     4b2:	88 23       	and	r24, r24
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <RxGetChannels>

	RxChannel = RxChannel1;
     4b6:	80 91 52 01 	lds	r24, 0x0152
     4ba:	90 91 53 01 	lds	r25, 0x0153
	RxChannel -= Config.RxChannel1ZeroOffset;				// normalise
	RxInRoll = (RxChannel >> 2);                    //     "
     4be:	20 91 5a 01 	lds	r18, 0x015A
     4c2:	30 91 5b 01 	lds	r19, 0x015B
     4c6:	82 1b       	sub	r24, r18
     4c8:	93 0b       	sbc	r25, r19
     4ca:	95 95       	asr	r25
     4cc:	87 95       	ror	r24
     4ce:	95 95       	asr	r25
     4d0:	87 95       	ror	r24
     4d2:	90 93 29 01 	sts	0x0129, r25
     4d6:	80 93 28 01 	sts	0x0128, r24

	while ( RxChannelsUpdatingFlag );
     4da:	80 91 51 01 	lds	r24, 0x0151
     4de:	88 23       	and	r24, r24
     4e0:	e1 f7       	brne	.-8      	; 0x4da <RxGetChannels+0x2c>

	RxChannel = RxChannel2;
     4e2:	80 91 3a 01 	lds	r24, 0x013A
     4e6:	90 91 3b 01 	lds	r25, 0x013B
	RxChannel -= Config.RxChannel2ZeroOffset;				// normalise
	RxInPitch = (RxChannel >> 2);                   //     "
     4ea:	20 91 5c 01 	lds	r18, 0x015C
     4ee:	30 91 5d 01 	lds	r19, 0x015D
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	95 95       	asr	r25
     4fc:	87 95       	ror	r24
     4fe:	90 93 43 01 	sts	0x0143, r25
     502:	80 93 42 01 	sts	0x0142, r24

	while ( RxChannelsUpdatingFlag );
     506:	80 91 51 01 	lds	r24, 0x0151
     50a:	88 23       	and	r24, r24
     50c:	e1 f7       	brne	.-8      	; 0x506 <__stack+0x7>

	RxChannel = RxChannel3;
     50e:	80 91 4f 01 	lds	r24, 0x014F
     512:	90 91 50 01 	lds	r25, 0x0150
	RxChannel -= Config.RxChannel3ZeroOffset;				// scale 0->100
	RxInCollective = (RxChannel >> 3);              // 
     516:	20 91 5e 01 	lds	r18, 0x015E
     51a:	30 91 5f 01 	lds	r19, 0x015F
     51e:	82 1b       	sub	r24, r18
     520:	93 0b       	sbc	r25, r19
     522:	a3 e0       	ldi	r26, 0x03	; 3
     524:	95 95       	asr	r25
     526:	87 95       	ror	r24
     528:	aa 95       	dec	r26
     52a:	e1 f7       	brne	.-8      	; 0x524 <__stack+0x25>
     52c:	90 93 1a 01 	sts	0x011A, r25
     530:	80 93 19 01 	sts	0x0119, r24

	while ( RxChannelsUpdatingFlag );
     534:	80 91 51 01 	lds	r24, 0x0151
     538:	88 23       	and	r24, r24
     53a:	e1 f7       	brne	.-8      	; 0x534 <__stack+0x35>

	RxChannel = RxChannel4;
     53c:	80 91 26 01 	lds	r24, 0x0126
     540:	90 91 27 01 	lds	r25, 0x0127
	RxChannel -= Config.RxChannel4ZeroOffset;				// normalise
     544:	20 91 60 01 	lds	r18, 0x0160
     548:	30 91 61 01 	lds	r19, 0x0161
     54c:	82 1b       	sub	r24, r18
     54e:	93 0b       	sbc	r25, r19
     550:	90 93 14 01 	sts	0x0114, r25
     554:	80 93 13 01 	sts	0x0113, r24
	RxInYaw = (RxChannel >> 2);                     //     "
     558:	95 95       	asr	r25
     55a:	87 95       	ror	r24
     55c:	95 95       	asr	r25
     55e:	87 95       	ror	r24
     560:	90 93 2b 01 	sts	0x012B, r25
     564:	80 93 2a 01 	sts	0x012A, r24

#ifdef TWIN_COPTER
	RxInOrgPitch = RxInPitch;
#endif
}
     568:	08 95       	ret

0000056a <output_motor_ppm>:
#if defined(SINGLE_COPTER) || defined(DUAL_COPTER) || defined(TWIN_COPTER) || defined(TRI_COPTER)
	static uint8_t ServoPPMRateCount;
#endif

	// if ESC's are high, we need to turn them off
	if (output_motor_high)
     56a:	80 91 08 01 	lds	r24, 0x0108
     56e:	88 23       	and	r24, r24
     570:	09 f4       	brne	.+2      	; 0x574 <output_motor_ppm+0xa>
     572:	db c0       	rjmp	.+438    	; 0x72a <output_motor_ppm+0x1c0>
		else if ( MotorOut4 > 200 ) MotorOut4 = 200;
		if ( MotorOut5 < 0 ) MotorOut5 = 0;
		else if ( MotorOut5 > 200 ) MotorOut5 = 200;
#else
		// set motor limits (0 -> 100)
		if ( MotorOut1 < 0 ) MotorOut1 = 0;
     574:	80 91 21 01 	lds	r24, 0x0121
     578:	90 91 22 01 	lds	r25, 0x0122
     57c:	97 ff       	sbrs	r25, 7
     57e:	05 c0       	rjmp	.+10     	; 0x58a <output_motor_ppm+0x20>
     580:	10 92 22 01 	sts	0x0122, r1
     584:	10 92 21 01 	sts	0x0121, r1
     588:	09 c0       	rjmp	.+18     	; 0x59c <output_motor_ppm+0x32>
		else if ( MotorOut1 > 100 ) MotorOut1 = 100;
     58a:	85 36       	cpi	r24, 0x65	; 101
     58c:	91 05       	cpc	r25, r1
     58e:	34 f0       	brlt	.+12     	; 0x59c <output_motor_ppm+0x32>
     590:	84 e6       	ldi	r24, 0x64	; 100
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 22 01 	sts	0x0122, r25
     598:	80 93 21 01 	sts	0x0121, r24
		if ( MotorOut2 < 0 ) MotorOut2 = 0;
     59c:	80 91 2c 01 	lds	r24, 0x012C
     5a0:	90 91 2d 01 	lds	r25, 0x012D
     5a4:	97 ff       	sbrs	r25, 7
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <output_motor_ppm+0x48>
     5a8:	10 92 2d 01 	sts	0x012D, r1
     5ac:	10 92 2c 01 	sts	0x012C, r1
     5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <output_motor_ppm+0x5a>
		else if ( MotorOut2 > 100 ) MotorOut2 = 100;
     5b2:	85 36       	cpi	r24, 0x65	; 101
     5b4:	91 05       	cpc	r25, r1
     5b6:	34 f0       	brlt	.+12     	; 0x5c4 <output_motor_ppm+0x5a>
     5b8:	84 e6       	ldi	r24, 0x64	; 100
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 2d 01 	sts	0x012D, r25
     5c0:	80 93 2c 01 	sts	0x012C, r24
		if ( MotorOut3 < 0 ) MotorOut3 = 0;
     5c4:	80 91 3e 01 	lds	r24, 0x013E
     5c8:	90 91 3f 01 	lds	r25, 0x013F
     5cc:	97 ff       	sbrs	r25, 7
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <output_motor_ppm+0x70>
     5d0:	10 92 3f 01 	sts	0x013F, r1
     5d4:	10 92 3e 01 	sts	0x013E, r1
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <output_motor_ppm+0x82>
		else if ( MotorOut3 > 100 ) MotorOut3 = 100;
     5da:	85 36       	cpi	r24, 0x65	; 101
     5dc:	91 05       	cpc	r25, r1
     5de:	34 f0       	brlt	.+12     	; 0x5ec <output_motor_ppm+0x82>
     5e0:	84 e6       	ldi	r24, 0x64	; 100
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	90 93 3f 01 	sts	0x013F, r25
     5e8:	80 93 3e 01 	sts	0x013E, r24
		if ( MotorOut4 < 0 ) MotorOut4 = 0;
     5ec:	80 91 32 01 	lds	r24, 0x0132
     5f0:	90 91 33 01 	lds	r25, 0x0133
     5f4:	97 ff       	sbrs	r25, 7
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <output_motor_ppm+0x98>
     5f8:	10 92 33 01 	sts	0x0133, r1
     5fc:	10 92 32 01 	sts	0x0132, r1
     600:	09 c0       	rjmp	.+18     	; 0x614 <output_motor_ppm+0xaa>
		else if ( MotorOut4 > 100 ) MotorOut4 = 100;
     602:	85 36       	cpi	r24, 0x65	; 101
     604:	91 05       	cpc	r25, r1
     606:	34 f0       	brlt	.+12     	; 0x614 <output_motor_ppm+0xaa>
     608:	84 e6       	ldi	r24, 0x64	; 100
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 33 01 	sts	0x0133, r25
     610:	80 93 32 01 	sts	0x0132, r24
		else if ( MotorOut6 > 100 ) MotorOut6 = 100;
	#endif
#endif

		// now calculate the time already passed that Motors were HIGH
		ElapsedTCNT1 = (TCNT1 - MotorStartTCNT1);
     614:	80 91 84 00 	lds	r24, 0x0084
     618:	90 91 85 00 	lds	r25, 0x0085
     61c:	20 91 10 01 	lds	r18, 0x0110
     620:	30 91 11 01 	lds	r19, 0x0111
     624:	82 1b       	sub	r24, r18
     626:	93 0b       	sbc	r25, r19
     628:	90 93 0f 01 	sts	0x010F, r25
     62c:	80 93 0e 01 	sts	0x010E, r24

		// start output timer
		TIFR0 &= ~(1 << TOV0);			// clr overflow
     630:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     632:	16 bc       	out	0x26, r1	; 38

		// convert into 10uS intervals
		num_of_10uS = (ElapsedTCNT1 / 10) + 1;
     634:	6a e0       	ldi	r22, 0x0A	; 10
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	0e 94 88 08 	call	0x1110	; 0x1110 <__udivmodhi4>
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	60 93 09 01 	sts	0x0109, r22
		MotorAdjust = 100 - num_of_10uS;
     642:	26 2f       	mov	r18, r22
     644:	33 27       	eor	r19, r19
     646:	27 fd       	sbrc	r18, 7
     648:	30 95       	com	r19
     64a:	84 e6       	ldi	r24, 0x64	; 100
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	82 1b       	sub	r24, r18
     650:	93 0b       	sbc	r25, r19
     652:	90 93 0d 01 	sts	0x010D, r25
     656:	80 93 0c 01 	sts	0x010C, r24
#ifdef SINGLE_COPTER
		// add adjustment (1mS - time already gone) to 1 channel
		MotorOut1 += MotorAdjust;
#else
		// add adjustment (1mS - time already gone) to all channels
		MotorOut1 += MotorAdjust;
     65a:	a0 91 21 01 	lds	r26, 0x0121
     65e:	b0 91 22 01 	lds	r27, 0x0122
     662:	a8 0f       	add	r26, r24
     664:	b9 1f       	adc	r27, r25
		MotorOut2 += MotorAdjust;
     666:	e0 91 2c 01 	lds	r30, 0x012C
     66a:	f0 91 2d 01 	lds	r31, 0x012D
     66e:	e8 0f       	add	r30, r24
     670:	f9 1f       	adc	r31, r25
		MotorOut3 += MotorAdjust;
     672:	40 91 3e 01 	lds	r20, 0x013E
     676:	50 91 3f 01 	lds	r21, 0x013F
     67a:	48 0f       	add	r20, r24
     67c:	59 1f       	adc	r21, r25
		MotorOut4 += MotorAdjust;
     67e:	20 91 32 01 	lds	r18, 0x0132
     682:	30 91 33 01 	lds	r19, 0x0133
     686:	28 0f       	add	r18, r24
     688:	39 1f       	adc	r19, r25
		// Pulse len = 1   -> 2    mS

		// Servo = 0 - 200
		// Pulse len = 0 -> 2.3ms

		TIFR0 &= ~(1 << TOV0);			// clr overflow
     68a:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     68c:	16 bc       	out	0x26, r1	; 38
     68e:	1f c0       	rjmp	.+62     	; 0x6ce <output_motor_ppm+0x164>
			}
		}
#else
		for (i=num_of_10uS;i<200;i++)	
		{
			while (TCNT0 < 80);			// 10uS @ 8MHz = 80 // 10 @ 1MHz = 10uS
     690:	86 b5       	in	r24, 0x26	; 38
     692:	80 35       	cpi	r24, 0x50	; 80
     694:	e8 f3       	brcs	.-6      	; 0x690 <output_motor_ppm+0x126>
			TCNT0 -= 80;
     696:	86 b5       	in	r24, 0x26	; 38
     698:	80 55       	subi	r24, 0x50	; 80
     69a:	86 bd       	out	0x26, r24	; 38

			if (MotorOut1) 
     69c:	10 97       	sbiw	r26, 0x00	; 0
     69e:	19 f0       	breq	.+6      	; 0x6a6 <output_motor_ppm+0x13c>
			{
				MotorOut1--;
     6a0:	11 97       	sbiw	r26, 0x01	; 1
				if (MotorOut1==0) M1 = 0;
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <output_motor_ppm+0x13c>
     6a4:	2a 98       	cbi	0x05, 2	; 5
			}
			if (MotorOut2) 
     6a6:	30 97       	sbiw	r30, 0x00	; 0
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <output_motor_ppm+0x146>
			{
				MotorOut2--;
     6aa:	31 97       	sbiw	r30, 0x01	; 1
				if (MotorOut2==0) M2 = 0;
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <output_motor_ppm+0x146>
     6ae:	29 98       	cbi	0x05, 1	; 5
			}
			if (MotorOut3) 
     6b0:	41 15       	cp	r20, r1
     6b2:	51 05       	cpc	r21, r1
     6b4:	21 f0       	breq	.+8      	; 0x6be <output_motor_ppm+0x154>
			{
				MotorOut3--;
     6b6:	41 50       	subi	r20, 0x01	; 1
     6b8:	50 40       	sbci	r21, 0x00	; 0
				if (MotorOut3==0) M3 = 0;
     6ba:	09 f4       	brne	.+2      	; 0x6be <output_motor_ppm+0x154>
     6bc:	28 98       	cbi	0x05, 0	; 5
			}
			if (MotorOut4) 
     6be:	21 15       	cp	r18, r1
     6c0:	31 05       	cpc	r19, r1
     6c2:	21 f0       	breq	.+8      	; 0x6cc <output_motor_ppm+0x162>
			{
				MotorOut4--;
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	30 40       	sbci	r19, 0x00	; 0
				if (MotorOut4==0) M4 = 0;
     6c8:	09 f4       	brne	.+2      	; 0x6cc <output_motor_ppm+0x162>
     6ca:	5f 98       	cbi	0x0b, 7	; 11
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
				MotorOut5--;
				if (MotorOut5==0) M5 = 0;
			}
		}
#else
		for (i=num_of_10uS;i<200;i++)	
     6ce:	68 3c       	cpi	r22, 0xC8	; 200
     6d0:	f8 f2       	brcs	.-66     	; 0x690 <output_motor_ppm+0x126>
     6d2:	b0 93 22 01 	sts	0x0122, r27
     6d6:	a0 93 21 01 	sts	0x0121, r26
     6da:	f0 93 2d 01 	sts	0x012D, r31
     6de:	e0 93 2c 01 	sts	0x012C, r30
     6e2:	50 93 3f 01 	sts	0x013F, r21
     6e6:	40 93 3e 01 	sts	0x013E, r20
     6ea:	30 93 33 01 	sts	0x0133, r19
     6ee:	20 93 32 01 	sts	0x0132, r18
     6f2:	60 93 12 01 	sts	0x0112, r22
	#endif
		}
#endif

		//Now wait low signal interval
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;
     6f6:	20 91 00 01 	lds	r18, 0x0100
     6fa:	30 91 01 01 	lds	r19, 0x0101
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	30 40       	sbci	r19, 0x00	; 0

		TIFR0 &= ~(1 << TOV0);		// clr overflow
     702:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;					// reset counter
     704:	16 bc       	out	0x26, r1	; 38
     706:	08 c0       	rjmp	.+16     	; 0x718 <output_motor_ppm+0x1ae>

		while (PWM_Low_Count--)
		{
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
     708:	86 b5       	in	r24, 0x26	; 38
     70a:	80 35       	cpi	r24, 0x50	; 80
     70c:	e8 f3       	brcs	.-6      	; 0x708 <output_motor_ppm+0x19e>
			TCNT0 -= 80;
     70e:	86 b5       	in	r24, 0x26	; 38
     710:	80 55       	subi	r24, 0x50	; 80
     712:	86 bd       	out	0x26, r24	; 38
     714:	21 50       	subi	r18, 0x01	; 1
     716:	30 40       	sbci	r19, 0x00	; 0
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;

		TIFR0 &= ~(1 << TOV0);		// clr overflow
		TCNT0 = 0;					// reset counter

		while (PWM_Low_Count--)
     718:	21 15       	cp	r18, r1
     71a:	31 05       	cpc	r19, r1
     71c:	a9 f7       	brne	.-22     	; 0x708 <output_motor_ppm+0x19e>
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	9f ef       	ldi	r25, 0xFF	; 255
     722:	90 93 0b 01 	sts	0x010B, r25
     726:	80 93 0a 01 	sts	0x010A, r24
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
			TCNT0 -= 80;
		}
	}

	if (! Armed) return;
     72a:	80 91 44 01 	lds	r24, 0x0144
     72e:	88 23       	and	r24, r24
     730:	79 f0       	breq	.+30     	; 0x750 <output_motor_ppm+0x1e6>

	// Log PWM signal HIGH	
	MotorStartTCNT1 = TCNT1;
     732:	80 91 84 00 	lds	r24, 0x0084
     736:	90 91 85 00 	lds	r25, 0x0085
     73a:	90 93 11 01 	sts	0x0111, r25
     73e:	80 93 10 01 	sts	0x0110, r24
	output_motor_high = true;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 08 01 	sts	0x0108, r24
		ServoPPMRateCount = 1;
	} else {
		ServoPPMRateCount++;
	}
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER) || defined(Y4_COPTER)
	M1 = 1;
     748:	2a 9a       	sbi	0x05, 2	; 5
	M2 = 1;
     74a:	29 9a       	sbi	0x05, 1	; 5
	M3 = 1;
     74c:	28 9a       	sbi	0x05, 0	; 5
	M4 = 1;
     74e:	5f 9a       	sbi	0x0b, 7	; 11
     750:	08 95       	ret

00000752 <Set_EEPROM_Default_Config>:
	}
}

void Set_EEPROM_Default_Config(void)
{
	Config.RollGyroDirection 	= GYRO_REVERSED;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 57 01 	sts	0x0157, r24
	Config.PitchGyroDirection	= GYRO_REVERSED;
     758:	80 93 58 01 	sts	0x0158, r24
	Config.YawGyroDirection		= GYRO_NORMAL;
     75c:	10 92 59 01 	sts	0x0159, r1

	Config.RxChannel1ZeroOffset	= 1520;
     760:	20 ef       	ldi	r18, 0xF0	; 240
     762:	35 e0       	ldi	r19, 0x05	; 5
     764:	30 93 5b 01 	sts	0x015B, r19
     768:	20 93 5a 01 	sts	0x015A, r18
	Config.RxChannel2ZeroOffset	= 1520;
     76c:	30 93 5d 01 	sts	0x015D, r19
     770:	20 93 5c 01 	sts	0x015C, r18
	Config.RxChannel3ZeroOffset	= 1120;
     774:	80 e6       	ldi	r24, 0x60	; 96
     776:	94 e0       	ldi	r25, 0x04	; 4
     778:	90 93 5f 01 	sts	0x015F, r25
     77c:	80 93 5e 01 	sts	0x015E, r24
	Config.RxChannel4ZeroOffset	= 1520;
     780:	30 93 61 01 	sts	0x0161, r19
     784:	20 93 60 01 	sts	0x0160, r18
}
     788:	08 95       	ret

0000078a <delay_us>:
	eeprom_write_block_changes( (const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	//current_config CONFIG_STRUCT
	sei();
}

void delay_us(uint8_t time)            /* time delay for us */
{ 
     78a:	08 c0       	rjmp	.+16     	; 0x79c <delay_us+0x12>
	...
 while(time--)
 {
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); 
     798:	00 00       	nop
     79a:	81 50       	subi	r24, 0x01	; 1
	sei();
}

void delay_us(uint8_t time)            /* time delay for us */
{ 
 while(time--)
     79c:	88 23       	and	r24, r24
     79e:	b1 f7       	brne	.-20     	; 0x78c <delay_us+0x2>
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); 
 }
}
     7a0:	08 95       	ret

000007a2 <delay_ms>:

void delay_ms(uint16_t time)
{
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	08 c0       	rjmp	.+16     	; 0x7bc <delay_ms+0x1a>
	uint8_t i;
	while(time--)
     7ac:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;i<10;i++) delay_us(100);
     7ae:	84 e6       	ldi	r24, 0x64	; 100
     7b0:	0e 94 c5 03 	call	0x78a	; 0x78a <delay_us>
     7b4:	1f 5f       	subi	r17, 0xFF	; 255
     7b6:	1a 30       	cpi	r17, 0x0A	; 10
     7b8:	d1 f7       	brne	.-12     	; 0x7ae <delay_ms+0xc>
     7ba:	21 97       	sbiw	r28, 0x01	; 1
}

void delay_ms(uint16_t time)
{
	uint8_t i;
	while(time--)
     7bc:	20 97       	sbiw	r28, 0x00	; 0
     7be:	b1 f7       	brne	.-20     	; 0x7ac <delay_ms+0xa>
	{
		for(i=0;i<10;i++) delay_us(100);
	}
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	08 95       	ret

000007c8 <loop>:
		}
	}
}

void loop(void)
{
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
	static uint8_t i;
	static uint16_t Change_Arming=0;
	static uint8_t Arming_TCNT2=0;

	RxGetChannels();
     7d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <RxGetChannels>

	if (RxInCollective < 0) {
     7d8:	80 91 19 01 	lds	r24, 0x0119
     7dc:	90 91 1a 01 	lds	r25, 0x011A
     7e0:	97 ff       	sbrs	r25, 7
     7e2:	43 c1       	rjmp	.+646    	; 0xa6a <loop+0x2a2>
		// check for stick arming (Timer2 @ 8MHz/1024 = 7812.5KHz)
		// arm: yaw right (>60), dis-arm: yaw left (<-60)
		Change_Arming += (uint8_t) (TCNT2 - Arming_TCNT2);
     7e4:	20 91 b2 00 	lds	r18, 0x00B2
     7e8:	80 91 15 01 	lds	r24, 0x0115
     7ec:	28 1b       	sub	r18, r24
     7ee:	80 91 16 01 	lds	r24, 0x0116
     7f2:	90 91 17 01 	lds	r25, 0x0117
     7f6:	82 0f       	add	r24, r18
     7f8:	91 1d       	adc	r25, r1
     7fa:	90 93 17 01 	sts	0x0117, r25
     7fe:	80 93 16 01 	sts	0x0116, r24
		Arming_TCNT2 = TCNT2;
     802:	80 91 b2 00 	lds	r24, 0x00B2
     806:	80 93 15 01 	sts	0x0115, r24

		if (!Armed) {		// nb to switch to Right-Side Arming: if (!Armed) {
     80a:	20 91 44 01 	lds	r18, 0x0144
     80e:	80 91 2a 01 	lds	r24, 0x012A
     812:	90 91 2b 01 	lds	r25, 0x012B
     816:	22 23       	and	r18, r18
     818:	19 f4       	brne	.+6      	; 0x820 <loop+0x58>
			if (RxInYaw<STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count
     81a:	cc 97       	sbiw	r24, 0x3c	; 60
     81c:	7c f0       	brlt	.+30     	; 0x83c <loop+0x74>
     81e:	03 c0       	rjmp	.+6      	; 0x826 <loop+0x5e>
		} else {
			if (RxInYaw>-STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count
     820:	85 5c       	subi	r24, 0xC5	; 197
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	5c f4       	brge	.+22     	; 0x83c <loop+0x74>
     826:	80 91 42 01 	lds	r24, 0x0142
     82a:	90 91 43 01 	lds	r25, 0x0143
     82e:	97 ff       	sbrs	r25, 7
     830:	03 c0       	rjmp	.+6      	; 0x838 <loop+0x70>
     832:	90 95       	com	r25
     834:	81 95       	neg	r24
     836:	9f 4f       	sbci	r25, 0xFF	; 255
     838:	4f 97       	sbiw	r24, 0x1f	; 31
     83a:	24 f0       	brlt	.+8      	; 0x844 <loop+0x7c>
     83c:	10 92 17 01 	sts	0x0117, r1
     840:	10 92 16 01 	sts	0x0116, r1
		}

		// 3Sec / 0.000128 = 23437 = 0x5B8D or 
		// 2.5Sec / 0.000128 = 19531 = 0x4C4B
		// 0.5Sec / 0.000128 = 3906 = 0x0F42
		if (Change_Arming>0x0F42)
     844:	80 91 16 01 	lds	r24, 0x0116
     848:	90 91 17 01 	lds	r25, 0x0117
     84c:	83 54       	subi	r24, 0x43	; 67
     84e:	9f 40       	sbci	r25, 0x0F	; 15
     850:	10 f1       	brcs	.+68     	; 0x896 <loop+0xce>
		{
			Armed = ! Armed;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	82 27       	eor	r24, r18
     856:	80 93 44 01 	sts	0x0144, r24
			LED = 0;
     85a:	2e 98       	cbi	0x05, 6	; 5
			ModeDelayCounter = 0;
     85c:	10 92 55 01 	sts	0x0155, r1
     860:	10 92 54 01 	sts	0x0154, r1

			if (Armed) {
     864:	88 23       	and	r24, r24
     866:	a1 f0       	breq	.+40     	; 0x890 <loop+0xc8>
				CalibrateGyros();
     868:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     86c:	10 92 08 01 	sts	0x0108, r1
				LED = 1;
     870:	2e 9a       	sbi	0x05, 6	; 5

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     872:	82 e3       	ldi	r24, 0x32	; 50
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	90 93 3d 01 	sts	0x013D, r25
     87a:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     87e:	90 93 2f 01 	sts	0x012F, r25
     882:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     886:	90 93 41 01 	sts	0x0141, r25
     88a:	80 93 40 01 	sts	0x0140, r24
     88e:	47 c2       	rjmp	.+1166   	; 0xd1e <loop+0x556>
			} else if (output_motor_high) {
     890:	80 91 08 01 	lds	r24, 0x0108
     894:	40 c2       	rjmp	.+1152   	; 0xd16 <loop+0x54e>
		}

		// --- Calibrate gyro when collective below 1% ---
		//if ( RxInCollective < 1 && Armed && abs(RxInRoll) <20 && abs(RxInPitch) <20)
		// --- Calibrate gyro when Thr: Low, Elevator: Down, Rudder: Left ---
		if (Armed && RxInYaw < -STICK_ARMING && RxInPitch > STICK_ARMING)
     896:	22 23       	and	r18, r18
     898:	09 f4       	brne	.+2      	; 0x89c <loop+0xd4>
     89a:	48 c0       	rjmp	.+144    	; 0x92c <loop+0x164>
     89c:	80 91 2a 01 	lds	r24, 0x012A
     8a0:	90 91 2b 01 	lds	r25, 0x012B
     8a4:	84 5c       	subi	r24, 0xC4	; 196
     8a6:	9f 4f       	sbci	r25, 0xFF	; 255
     8a8:	0c f0       	brlt	.+2      	; 0x8ac <loop+0xe4>
     8aa:	40 c0       	rjmp	.+128    	; 0x92c <loop+0x164>
     8ac:	80 91 42 01 	lds	r24, 0x0142
     8b0:	90 91 43 01 	lds	r25, 0x0143
     8b4:	cd 97       	sbiw	r24, 0x3d	; 61
     8b6:	d4 f1       	brlt	.+116    	; 0x92c <loop+0x164>
		{
			if (ModeDelayCounter==0)
     8b8:	80 91 54 01 	lds	r24, 0x0154
     8bc:	90 91 55 01 	lds	r25, 0x0155
     8c0:	89 2b       	or	r24, r25
     8c2:	59 f5       	brne	.+86     	; 0x91a <loop+0x152>
			{
				//ModeDelayCounter = 0xFB4F;	// 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	// 0xFFFF-FE6F=0x190=400/400 = 1Seconds
     8c4:	8f e6       	ldi	r24, 0x6F	; 111
     8c6:	9e ef       	ldi	r25, 0xFE	; 254
     8c8:	90 93 55 01 	sts	0x0155, r25
     8cc:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     8d0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     8d4:	10 92 08 01 	sts	0x0108, r1
				delay_ms(150);
     8d8:	86 e9       	ldi	r24, 0x96	; 150
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     8e0:	82 e3       	ldi	r24, 0x32	; 50
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 3d 01 	sts	0x013D, r25
     8e8:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     8ec:	90 93 2f 01 	sts	0x012F, r25
     8f0:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     8f4:	90 93 41 01 	sts	0x0141, r25
     8f8:	80 93 40 01 	sts	0x0140, r24

				// flash LED 1 time
				for (i=0;i<1;i++)
     8fc:	10 92 18 01 	sts	0x0118, r1
				{
					LED = 0;
     900:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     902:	89 e1       	ldi	r24, 0x19	; 25
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
					LED = 1;
     90a:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     90c:	89 e1       	ldi	r24, 0x19	; 25
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
     914:	81 e0       	ldi	r24, 0x01	; 1
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
				StickYawGain = NORMAL_STICK_YAW_GAIN;

				// flash LED 1 time
				for (i=0;i<1;i++)
     916:	80 93 18 01 	sts	0x0118, r24
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     91a:	80 91 54 01 	lds	r24, 0x0154
     91e:	90 91 55 01 	lds	r25, 0x0155
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	90 93 55 01 	sts	0x0155, r25
     928:	80 93 54 01 	sts	0x0154, r24
		}


		// --- Acro Mode when Thr: Low, Elevator: Up, Rudder: Left ---
		if (Armed && RxInYaw < -STICK_ARMING && RxInPitch < -STICK_ARMING)
     92c:	80 91 44 01 	lds	r24, 0x0144
     930:	88 23       	and	r24, r24
     932:	09 f4       	brne	.+2      	; 0x936 <loop+0x16e>
     934:	4d c0       	rjmp	.+154    	; 0x9d0 <loop+0x208>
     936:	80 91 2a 01 	lds	r24, 0x012A
     93a:	90 91 2b 01 	lds	r25, 0x012B
     93e:	84 5c       	subi	r24, 0xC4	; 196
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	0c f0       	brlt	.+2      	; 0x946 <loop+0x17e>
     944:	45 c0       	rjmp	.+138    	; 0x9d0 <loop+0x208>
     946:	80 91 42 01 	lds	r24, 0x0142
     94a:	90 91 43 01 	lds	r25, 0x0143
     94e:	84 5c       	subi	r24, 0xC4	; 196
     950:	9f 4f       	sbci	r25, 0xFF	; 255
     952:	f4 f5       	brge	.+124    	; 0x9d0 <loop+0x208>
		{
			if (ModeDelayCounter==0)
     954:	80 91 54 01 	lds	r24, 0x0154
     958:	90 91 55 01 	lds	r25, 0x0155
     95c:	89 2b       	or	r24, r25
     95e:	79 f5       	brne	.+94     	; 0x9be <loop+0x1f6>
			{
				//ModeDelayCounter = 0xFB4F;	// 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	// 0xFFFF-FE6F=0x190=400/400 = 1Seconds
     960:	8f e6       	ldi	r24, 0x6F	; 111
     962:	9e ef       	ldi	r25, 0xFE	; 254
     964:	90 93 55 01 	sts	0x0155, r25
     968:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     96c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     970:	10 92 08 01 	sts	0x0108, r1
				delay_ms(100);
     974:	84 e6       	ldi	r24, 0x64	; 100
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>

				// Acro
				StickRollGain = ACRO_STICK_ROLL_GAIN;
     97c:	86 e4       	ldi	r24, 0x46	; 70
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	90 93 3d 01 	sts	0x013D, r25
     984:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = ACRO_STICK_PITCH_GAIN;
     988:	90 93 2f 01 	sts	0x012F, r25
     98c:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = ACRO_STICK_YAW_GAIN;
     990:	90 93 41 01 	sts	0x0141, r25
     994:	80 93 40 01 	sts	0x0140, r24

				// flash LED 2 times
				for (i=0;i<2;i++)
     998:	10 92 18 01 	sts	0x0118, r1
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <loop+0x1ee>
				{
					LED = 0;
     9a0:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     9a2:	89 e1       	ldi	r24, 0x19	; 25
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
					LED = 1;
     9aa:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     9ac:	89 e1       	ldi	r24, 0x19	; 25
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
     9b4:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = ACRO_STICK_ROLL_GAIN;
				StickPitchGain = ACRO_STICK_PITCH_GAIN;
				StickYawGain = ACRO_STICK_YAW_GAIN;

				// flash LED 2 times
				for (i=0;i<2;i++)
     9b6:	12 30       	cpi	r17, 0x02	; 2
     9b8:	98 f3       	brcs	.-26     	; 0x9a0 <loop+0x1d8>
     9ba:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     9be:	80 91 54 01 	lds	r24, 0x0154
     9c2:	90 91 55 01 	lds	r25, 0x0155
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	90 93 55 01 	sts	0x0155, r25
     9cc:	80 93 54 01 	sts	0x0154, r24
		}

		// --- UFO Mode when Thr: Low, Elevator: Up, Rudder: Right ---
		if (Armed && RxInYaw > STICK_ARMING && RxInPitch < -STICK_ARMING)
     9d0:	80 91 44 01 	lds	r24, 0x0144
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <loop+0x212>
     9d8:	48 c0       	rjmp	.+144    	; 0xa6a <loop+0x2a2>
     9da:	80 91 2a 01 	lds	r24, 0x012A
     9de:	90 91 2b 01 	lds	r25, 0x012B
     9e2:	cd 97       	sbiw	r24, 0x3d	; 61
     9e4:	0c f4       	brge	.+2      	; 0x9e8 <loop+0x220>
     9e6:	41 c0       	rjmp	.+130    	; 0xa6a <loop+0x2a2>
     9e8:	80 91 42 01 	lds	r24, 0x0142
     9ec:	90 91 43 01 	lds	r25, 0x0143
     9f0:	84 5c       	subi	r24, 0xC4	; 196
     9f2:	9f 4f       	sbci	r25, 0xFF	; 255
     9f4:	d4 f5       	brge	.+116    	; 0xa6a <loop+0x2a2>
		{
			if (ModeDelayCounter==0)
     9f6:	80 91 54 01 	lds	r24, 0x0154
     9fa:	90 91 55 01 	lds	r25, 0x0155
     9fe:	89 2b       	or	r24, r25
     a00:	59 f5       	brne	.+86     	; 0xa58 <loop+0x290>
			{
				//ModeDelayCounter = 0xFB4F;	// 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	// 0xFFFF-FE6F=0x190=400/400 = 1Seconds
     a02:	8f e6       	ldi	r24, 0x6F	; 111
     a04:	9e ef       	ldi	r25, 0xFE	; 254
     a06:	90 93 55 01 	sts	0x0155, r25
     a0a:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     a0e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     a12:	10 92 08 01 	sts	0x0108, r1
		
				// Acro
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     a16:	82 e3       	ldi	r24, 0x32	; 50
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 3d 01 	sts	0x013D, r25
     a1e:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     a22:	90 93 2f 01 	sts	0x012F, r25
     a26:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = UFO_STICK_YAW_GAIN;
     a2a:	8a e5       	ldi	r24, 0x5A	; 90
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 41 01 	sts	0x0141, r25
     a32:	80 93 40 01 	sts	0x0140, r24
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <loop+0x288>
		
				// flash LED 4 times
				for (i=0;i<4;i++)
				{
					LED = 0;
     a3a:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     a3c:	89 e1       	ldi	r24, 0x19	; 25
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
					LED = 1;
     a44:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     a46:	89 e1       	ldi	r24, 0x19	; 25
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
     a4e:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
				StickYawGain = UFO_STICK_YAW_GAIN;
		
				// flash LED 4 times
				for (i=0;i<4;i++)
     a50:	14 30       	cpi	r17, 0x04	; 4
     a52:	98 f3       	brcs	.-26     	; 0xa3a <loop+0x272>
     a54:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     a58:	80 91 54 01 	lds	r24, 0x0154
     a5c:	90 91 55 01 	lds	r25, 0x0155
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	90 93 55 01 	sts	0x0155, r25
     a66:	80 93 54 01 	sts	0x0154, r24
		}

	}

	//--- Read gyros ---
	ReadGyros(false);
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 8a 01 	call	0x314	; 0x314 <ReadGyros>

	//--- Start mixing by setting collective to motor input 1,2,3,4 and 5,6
#ifndef SINGLE_COPTER
	if (RxInCollective > MAX_COLLECTIVE) RxInCollective = MAX_COLLECTIVE;
     a70:	80 91 19 01 	lds	r24, 0x0119
     a74:	90 91 1a 01 	lds	r25, 0x011A
     a78:	8b 35       	cpi	r24, 0x5B	; 91
     a7a:	91 05       	cpc	r25, r1
     a7c:	34 f0       	brlt	.+12     	; 0xa8a <loop+0x2c2>
     a7e:	8a e5       	ldi	r24, 0x5A	; 90
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 1a 01 	sts	0x011A, r25
     a86:	80 93 19 01 	sts	0x0119, r24
	MotorOut2 = RxInCollective;
	MotorOut3 = RxInCollective;
	MotorOut4 = 50;
	MotorOut5 = 50;		// Reverse
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER)
	MotorOut1 = RxInCollective;
     a8a:	c0 91 19 01 	lds	r28, 0x0119
     a8e:	d0 91 1a 01 	lds	r29, 0x011A
#endif

	//--- Calculate roll gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[ROLL] = gyroADC[ROLL] * GainIn[ROLL] * ROLL_GAIN_MULTIPLIER;		// 100 * 50 * 3 = 15000	150 * 50 * 3 = 22500		250 * 50 * 3 = 37500
	gyroADC[ROLL] /= ADC_GAIN_DIVIDER;											// 15000/150 = 100		22500/225 = 100		37500/375 = 100
     a92:	20 91 34 01 	lds	r18, 0x0134
     a96:	30 91 35 01 	lds	r19, 0x0135
     a9a:	c9 01       	movw	r24, r18
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	82 0f       	add	r24, r18
     aa6:	93 1f       	adc	r25, r19
     aa8:	20 91 1b 01 	lds	r18, 0x011B
     aac:	30 91 1c 01 	lds	r19, 0x011C
     ab0:	ac 01       	movw	r20, r24
     ab2:	42 9f       	mul	r20, r18
     ab4:	c0 01       	movw	r24, r0
     ab6:	43 9f       	mul	r20, r19
     ab8:	90 0d       	add	r25, r0
     aba:	52 9f       	mul	r21, r18
     abc:	90 0d       	add	r25, r0
     abe:	11 24       	eor	r1, r1
     ac0:	68 ec       	ldi	r22, 0xC8	; 200
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     ac8:	fb 01       	movw	r30, r22
     aca:	70 93 1c 01 	sts	0x011C, r23
     ace:	60 93 1b 01 	sts	0x011B, r22
	RxInRoll = (RxInRoll * StickRollGain / 100);	// Stick Controll %
     ad2:	20 91 3c 01 	lds	r18, 0x013C
     ad6:	30 91 3d 01 	lds	r19, 0x013D
     ada:	80 91 28 01 	lds	r24, 0x0128
     ade:	90 91 29 01 	lds	r25, 0x0129
     ae2:	ac 01       	movw	r20, r24
     ae4:	24 9f       	mul	r18, r20
     ae6:	c0 01       	movw	r24, r0
     ae8:	25 9f       	mul	r18, r21
     aea:	90 0d       	add	r25, r0
     aec:	34 9f       	mul	r19, r20
     aee:	90 0d       	add	r25, r0
     af0:	11 24       	eor	r1, r1
     af2:	64 e6       	ldi	r22, 0x64	; 100
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     afa:	9b 01       	movw	r18, r22

	//--- (Add)Adjust roll gyro output to motors
	if (Config.RollGyroDirection == GYRO_NORMAL) {
     afc:	80 91 57 01 	lds	r24, 0x0157
     b00:	88 23       	and	r24, r24
     b02:	39 f4       	brne	.+14     	; 0xb12 <loop+0x34a>
		RxInRoll += gyroADC[ROLL];
     b04:	e6 0f       	add	r30, r22
     b06:	f7 1f       	adc	r31, r23
     b08:	f0 93 29 01 	sts	0x0129, r31
     b0c:	e0 93 28 01 	sts	0x0128, r30
     b10:	06 c0       	rjmp	.+12     	; 0xb1e <loop+0x356>
	} else {
		RxInRoll -= gyroADC[ROLL];
     b12:	2e 1b       	sub	r18, r30
     b14:	3f 0b       	sbc	r19, r31
     b16:	30 93 29 01 	sts	0x0129, r19
     b1a:	20 93 28 01 	sts	0x0128, r18
#elif defined(TRI_COPTER)
	RxInRoll   = (RxInRoll * 20)/23;	//RxInRollSine 60= 0.866 ~ 20/23 or possibly 7/8
	MotorOut1 += RxInRoll;
	MotorOut2 -= RxInRoll;
#elif defined(QUAD_COPTER)
	MotorOut2 += RxInRoll;
     b1e:	e0 90 28 01 	lds	r14, 0x0128
     b22:	f0 90 29 01 	lds	r15, 0x0129
#endif

	//--- Calculate pitch gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[PITCH] = gyroADC[PITCH] * GainIn[PITCH] * PITCH_GAIN_MULTIPLIER;  
	gyroADC[PITCH] /= ADC_GAIN_DIVIDER;
     b26:	20 91 36 01 	lds	r18, 0x0136
     b2a:	30 91 37 01 	lds	r19, 0x0137
     b2e:	c9 01       	movw	r24, r18
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	82 0f       	add	r24, r18
     b3a:	93 1f       	adc	r25, r19
     b3c:	20 91 1d 01 	lds	r18, 0x011D
     b40:	30 91 1e 01 	lds	r19, 0x011E
     b44:	ac 01       	movw	r20, r24
     b46:	42 9f       	mul	r20, r18
     b48:	c0 01       	movw	r24, r0
     b4a:	43 9f       	mul	r20, r19
     b4c:	90 0d       	add	r25, r0
     b4e:	52 9f       	mul	r21, r18
     b50:	90 0d       	add	r25, r0
     b52:	11 24       	eor	r1, r1
     b54:	68 ec       	ldi	r22, 0xC8	; 200
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     b5c:	fb 01       	movw	r30, r22
     b5e:	70 93 1e 01 	sts	0x011E, r23
     b62:	60 93 1d 01 	sts	0x011D, r22
	RxInPitch = (RxInPitch * StickPitchGain / 100);	// Stick Controll %
     b66:	20 91 2e 01 	lds	r18, 0x012E
     b6a:	30 91 2f 01 	lds	r19, 0x012F
     b6e:	80 91 42 01 	lds	r24, 0x0142
     b72:	90 91 43 01 	lds	r25, 0x0143
     b76:	ac 01       	movw	r20, r24
     b78:	24 9f       	mul	r18, r20
     b7a:	c0 01       	movw	r24, r0
     b7c:	25 9f       	mul	r18, r21
     b7e:	90 0d       	add	r25, r0
     b80:	34 9f       	mul	r19, r20
     b82:	90 0d       	add	r25, r0
     b84:	11 24       	eor	r1, r1
     b86:	64 e6       	ldi	r22, 0x64	; 100
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     b8e:	9b 01       	movw	r18, r22

	//--- (Add)Adjust pitch gyro output to motors
	if (Config.PitchGyroDirection == GYRO_NORMAL) {	
     b90:	80 91 58 01 	lds	r24, 0x0158
     b94:	88 23       	and	r24, r24
     b96:	39 f4       	brne	.+14     	; 0xba6 <loop+0x3de>
		RxInPitch += gyroADC[PITCH];
     b98:	e6 0f       	add	r30, r22
     b9a:	f7 1f       	adc	r31, r23
     b9c:	f0 93 43 01 	sts	0x0143, r31
     ba0:	e0 93 42 01 	sts	0x0142, r30
     ba4:	06 c0       	rjmp	.+12     	; 0xbb2 <loop+0x3ea>
	} else {
		RxInPitch -= gyroADC[PITCH];
     ba6:	2e 1b       	sub	r18, r30
     ba8:	3f 0b       	sbc	r19, r31
     baa:	30 93 43 01 	sts	0x0143, r19
     bae:	20 93 42 01 	sts	0x0142, r18
	MotorOut3 -= RxInPitch;
	RxInPitch = (RxInPitch >> 1);						// cosine of 60
	MotorOut1 += RxInPitch;
	MotorOut2 += RxInPitch;
#elif defined(QUAD_COPTER)
	MotorOut1 += RxInPitch;
     bb2:	00 91 42 01 	lds	r16, 0x0142
     bb6:	10 91 43 01 	lds	r17, 0x0143
	MotorOut4 += RxInPitch;
#endif

	//--- Calculate yaw gyro output ---
	gyroADC[YAW] = (gyroADC[YAW] * GainIn[YAW] * YAW_GAIN_MULTIPLIER);
	gyroADC[YAW] /= ADC_GAIN_DIVIDER;
     bba:	20 91 38 01 	lds	r18, 0x0138
     bbe:	30 91 39 01 	lds	r19, 0x0139
     bc2:	c9 01       	movw	r24, r18
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	20 91 1f 01 	lds	r18, 0x011F
     bd4:	30 91 20 01 	lds	r19, 0x0120
     bd8:	ac 01       	movw	r20, r24
     bda:	42 9f       	mul	r20, r18
     bdc:	c0 01       	movw	r24, r0
     bde:	43 9f       	mul	r20, r19
     be0:	90 0d       	add	r25, r0
     be2:	52 9f       	mul	r21, r18
     be4:	90 0d       	add	r25, r0
     be6:	11 24       	eor	r1, r1
     be8:	68 ec       	ldi	r22, 0xC8	; 200
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     bf0:	fb 01       	movw	r30, r22
     bf2:	70 93 20 01 	sts	0x0120, r23
     bf6:	60 93 1f 01 	sts	0x011F, r22
	RxInYaw = (RxInYaw * StickYawGain / 100);			// Stick Controll %
     bfa:	20 91 40 01 	lds	r18, 0x0140
     bfe:	30 91 41 01 	lds	r19, 0x0141
     c02:	80 91 2a 01 	lds	r24, 0x012A
     c06:	90 91 2b 01 	lds	r25, 0x012B
     c0a:	ac 01       	movw	r20, r24
     c0c:	24 9f       	mul	r18, r20
     c0e:	c0 01       	movw	r24, r0
     c10:	25 9f       	mul	r18, r21
     c12:	90 0d       	add	r25, r0
     c14:	34 9f       	mul	r19, r20
     c16:	90 0d       	add	r25, r0
     c18:	11 24       	eor	r1, r1
     c1a:	64 e6       	ldi	r22, 0x64	; 100
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     c22:	9b 01       	movw	r18, r22

	//--- (Add)Adjust yaw gyro output to motors
	if (Config.YawGyroDirection == GYRO_NORMAL) {		// scale gyro output
     c24:	80 91 59 01 	lds	r24, 0x0159
     c28:	88 23       	and	r24, r24
     c2a:	39 f4       	brne	.+14     	; 0xc3a <loop+0x472>
		RxInYaw += gyroADC[YAW];
     c2c:	e6 0f       	add	r30, r22
     c2e:	f7 1f       	adc	r31, r23
     c30:	f0 93 2b 01 	sts	0x012B, r31
     c34:	e0 93 2a 01 	sts	0x012A, r30
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <loop+0x47e>
	} else {
		RxInYaw -= gyroADC[YAW];
     c3a:	2e 1b       	sub	r18, r30
     c3c:	3f 0b       	sbc	r19, r31
     c3e:	30 93 2b 01 	sts	0x012B, r19
     c42:	20 93 2a 01 	sts	0x012A, r18
    MotorOut4 -= LowpassOutYaw;  // JLN version for the Yaw gyro correction

	// Servo Reverse Pin
	MotorOut5 -= LowpassOutYaw;
#elif defined(QUAD_COPTER)
	MotorOut1 -= RxInYaw;
     c46:	80 91 2a 01 	lds	r24, 0x012A
     c4a:	90 91 2b 01 	lds	r25, 0x012B
     c4e:	98 01       	movw	r18, r16
     c50:	2c 0f       	add	r18, r28
     c52:	3d 1f       	adc	r19, r29
     c54:	28 1b       	sub	r18, r24
     c56:	39 0b       	sbc	r19, r25
     c58:	30 93 22 01 	sts	0x0122, r19
     c5c:	20 93 21 01 	sts	0x0121, r18
	MotorOut2 += RxInYaw;
     c60:	a7 01       	movw	r20, r14
     c62:	4c 0f       	add	r20, r28
     c64:	5d 1f       	adc	r21, r29
     c66:	48 0f       	add	r20, r24
     c68:	59 1f       	adc	r21, r25
     c6a:	50 93 2d 01 	sts	0x012D, r21
     c6e:	40 93 2c 01 	sts	0x012C, r20
	MotorOut3 += RxInYaw;
     c72:	bc 01       	movw	r22, r24
     c74:	6c 0f       	add	r22, r28
     c76:	7d 1f       	adc	r23, r29
     c78:	6e 19       	sub	r22, r14
     c7a:	7f 09       	sbc	r23, r15
     c7c:	70 93 3f 01 	sts	0x013F, r23
     c80:	60 93 3e 01 	sts	0x013E, r22
	MotorOut4 -= RxInYaw;
     c84:	fe 01       	movw	r30, r28
     c86:	e0 1b       	sub	r30, r16
     c88:	f1 0b       	sbc	r31, r17
     c8a:	e8 1b       	sub	r30, r24
     c8c:	f9 0b       	sbc	r31, r25
     c8e:	f0 93 33 01 	sts	0x0133, r31
     c92:	e0 93 32 01 	sts	0x0132, r30
#elif defined(TRI_COPTER)
	if ( MotorOut1 < 10 )	MotorOut1 = 10;					// this is the motor idle level
	if ( MotorOut2 < 10 )	MotorOut2 = 10;	
	if ( MotorOut3 < 10 )	MotorOut3 = 10;
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER) || defined(Y4_COPTER)
	if ( MotorOut1 < 10 )	MotorOut1 = 10;					// this is the motor idle level
     c96:	2a 30       	cpi	r18, 0x0A	; 10
     c98:	31 05       	cpc	r19, r1
     c9a:	34 f4       	brge	.+12     	; 0xca8 <loop+0x4e0>
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	90 93 22 01 	sts	0x0122, r25
     ca4:	80 93 21 01 	sts	0x0121, r24
	if ( MotorOut2 < 10 )	MotorOut2 = 10;	
     ca8:	4a 30       	cpi	r20, 0x0A	; 10
     caa:	51 05       	cpc	r21, r1
     cac:	34 f4       	brge	.+12     	; 0xcba <loop+0x4f2>
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	90 93 2d 01 	sts	0x012D, r25
     cb6:	80 93 2c 01 	sts	0x012C, r24
	if ( MotorOut3 < 10 )	MotorOut3 = 10;
     cba:	6a 30       	cpi	r22, 0x0A	; 10
     cbc:	71 05       	cpc	r23, r1
     cbe:	34 f4       	brge	.+12     	; 0xccc <loop+0x504>
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	90 93 3f 01 	sts	0x013F, r25
     cc8:	80 93 3e 01 	sts	0x013E, r24
	if ( MotorOut4 < 10 )	MotorOut4 = 10;	
     ccc:	3a 97       	sbiw	r30, 0x0a	; 10
     cce:	34 f4       	brge	.+12     	; 0xcdc <loop+0x514>
     cd0:	8a e0       	ldi	r24, 0x0A	; 10
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	90 93 33 01 	sts	0x0133, r25
     cd8:	80 93 32 01 	sts	0x0132, r24
	if ( MotorOut5 < 10 )	MotorOut5 = 10;	
	if ( MotorOut6 < 10 )	MotorOut6 = 10;	
#endif

	//--- Output to motor ESC's ---
	if (RxInCollective < 1 || !Armed || !GyroCalibrated)	// turn off motors if collective below 1% ???
     cdc:	1c 16       	cp	r1, r28
     cde:	1d 06       	cpc	r1, r29
     ce0:	44 f4       	brge	.+16     	; 0xcf2 <loop+0x52a>
     ce2:	80 91 44 01 	lds	r24, 0x0144
     ce6:	88 23       	and	r24, r24
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <loop+0x52a>
     cea:	80 91 23 01 	lds	r24, 0x0123
     cee:	88 23       	and	r24, r24
     cf0:	81 f4       	brne	.+32     	; 0xd12 <loop+0x54a>
		MotorOut2 = 0;
		MotorOut3 = 0;
		MotorOut4 = 50;
		MotorOut5 = 50;
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER) || defined(Y4_COPTER)
		MotorOut1 = 0;
     cf2:	10 92 22 01 	sts	0x0122, r1
     cf6:	10 92 21 01 	sts	0x0121, r1
		MotorOut2 = 0;
     cfa:	10 92 2d 01 	sts	0x012D, r1
     cfe:	10 92 2c 01 	sts	0x012C, r1
		MotorOut3 = 0;
     d02:	10 92 3f 01 	sts	0x013F, r1
     d06:	10 92 3e 01 	sts	0x013E, r1
		MotorOut4 = 0;
     d0a:	10 92 33 01 	sts	0x0133, r1
     d0e:	10 92 32 01 	sts	0x0132, r1
		MotorOut5 = 0;
		MotorOut6 = 0;
#endif
	}

	if (Armed) output_motor_ppm();		// output ESC signal
     d12:	80 91 44 01 	lds	r24, 0x0144
     d16:	88 23       	and	r24, r24
     d18:	11 f0       	breq	.+4      	; 0xd1e <loop+0x556>
     d1a:	0e 94 b5 02 	call	0x56a	; 0x56a <output_motor_ppm>
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	08 95       	ret

00000d2c <eeprom_write_byte_changed>:
	M6 = 1;
#endif
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
     d34:	16 2f       	mov	r17, r22
	if(eeprom_read_byte(addr) != value)
     d36:	0e 94 bf 08 	call	0x117e	; 0x117e <__eerd_byte_m168p>
     d3a:	81 17       	cp	r24, r17
     d3c:	21 f0       	breq	.+8      	; 0xd46 <eeprom_write_byte_changed+0x1a>
	{
		eeprom_write_byte( addr, value );
     d3e:	ce 01       	movw	r24, r28
     d40:	61 2f       	mov	r22, r17
     d42:	0e 94 c7 08 	call	0x118e	; 0x118e <__eewr_byte_m168p>
	}
}
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	08 95       	ret

00000d4e <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	8c 01       	movw	r16, r24
     d60:	6b 01       	movw	r12, r22
     d62:	7a 01       	movw	r14, r20
     d64:	c0 e0       	ldi	r28, 0x00	; 0
     d66:	d0 e0       	ldi	r29, 0x00	; 0
     d68:	09 c0       	rjmp	.+18     	; 0xd7c <eeprom_write_block_changes+0x2e>
	size_t len;

	for(len=0;len<size;len++)
	{
		eeprom_write_byte_changed( dest,  *src );
     d6a:	c6 01       	movw	r24, r12
     d6c:	8c 0f       	add	r24, r28
     d6e:	9d 1f       	adc	r25, r29
     d70:	f8 01       	movw	r30, r16
     d72:	61 91       	ld	r22, Z+
     d74:	8f 01       	movw	r16, r30
     d76:	0e 94 96 06 	call	0xd2c	; 0xd2c <eeprom_write_byte_changed>

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
	size_t len;

	for(len=0;len<size;len++)
     d7a:	21 96       	adiw	r28, 0x01	; 1
     d7c:	ce 15       	cp	r28, r14
     d7e:	df 05       	cpc	r29, r15
     d80:	a0 f3       	brcs	.-24     	; 0xd6a <eeprom_write_block_changes+0x1c>
		eeprom_write_byte_changed( dest,  *src );

		src++;
		dest++;
	}
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	08 95       	ret

00000d94 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// write to eeProm
	cli();
     d94:	f8 94       	cli
	eeprom_write_block_changes( (const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	//current_config CONFIG_STRUCT
     d96:	86 e5       	ldi	r24, 0x56	; 86
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	4c e0       	ldi	r20, 0x0C	; 12
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <eeprom_write_block_changes>
	sei();
     da6:	78 94       	sei
}
     da8:	08 95       	ret

00000daa <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// load up last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!=0x47)
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 bf 08 	call	0x117e	; 0x117e <__eerd_byte_m168p>
     db2:	87 34       	cpi	r24, 0x47	; 71
     db4:	41 f0       	breq	.+16     	; 0xdc6 <Initial_EEPROM_Config_Load+0x1c>
	{
		Config.setup = 0x47;
     db6:	87 e4       	ldi	r24, 0x47	; 71
     db8:	80 93 56 01 	sts	0x0156, r24
		Set_EEPROM_Default_Config();
     dbc:	0e 94 a9 03 	call	0x752	; 0x752 <Set_EEPROM_Default_Config>
		// write to eeProm
		Save_Config_to_EEPROM();
     dc0:	0e 94 ca 06 	call	0xd94	; 0xd94 <Save_Config_to_EEPROM>
     dc4:	08 95       	ret
	} else {
		// read eeprom
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
     dc6:	86 e5       	ldi	r24, 0x56	; 86
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	4c e0       	ldi	r20, 0x0C	; 12
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	0e 94 af 08 	call	0x115e	; 0x115e <__eerd_block_m168p>
     dd6:	08 95       	ret

00000dd8 <setup>:

	return 1;
}

void setup(void)
{
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
	uint16_t i;	// nb was uint8_t, must be uint16_t for TRI
	uint16_t RxChannel1ZeroOffset, RxChannel2ZeroOffset, RxChannel4ZeroOffset;

	MCUCR |= (1<<PUD);	// Pull-up Disable
     de8:	85 b7       	in	r24, 0x35	; 53
     dea:	80 61       	ori	r24, 0x10	; 16
     dec:	85 bf       	out	0x35, r24	; 53

	RX_ROLL_DIR 		= INPUT;
     dee:	51 98       	cbi	0x0a, 1	; 10
	RX_PITCH_DIR 		= INPUT;
     df0:	52 98       	cbi	0x0a, 2	; 10
	RX_COLL_DIR   		= INPUT;
     df2:	53 98       	cbi	0x0a, 3	; 10
	RX_YAW_DIR   	 	= INPUT;
     df4:	27 98       	cbi	0x04, 7	; 4

	GYRO_YAW_DIR 	 	= INPUT;
     df6:	38 98       	cbi	0x07, 0	; 7
	GYRO_PITCH_DIR 	 	= INPUT;
     df8:	39 98       	cbi	0x07, 1	; 7
	GYRO_ROLL_DIR  		= INPUT;
     dfa:	3a 98       	cbi	0x07, 2	; 7
	GAIN_YAW_DIR 	 	= INPUT;
     dfc:	3d 98       	cbi	0x07, 5	; 7
	GAIN_PITCH_DIR		= INPUT;
     dfe:	3c 98       	cbi	0x07, 4	; 7
	GAIN_ROLL_DIR  		= INPUT;
     e00:	3b 98       	cbi	0x07, 3	; 7

	M1_DIR 				= OUTPUT;
     e02:	22 9a       	sbi	0x04, 2	; 4
	M2_DIR 				= OUTPUT;
     e04:	21 9a       	sbi	0x04, 1	; 4
	M3_DIR 			 	= OUTPUT;
     e06:	20 9a       	sbi	0x04, 0	; 4
	M4_DIR 			 	= OUTPUT;
     e08:	57 9a       	sbi	0x0a, 7	; 10
	M5_DIR 				= OUTPUT;
#endif
#if defined(TWIN_COPTER) || defined(HEX_COPTER) || defined(Y6_COPTER)
	M6_DIR 				= OUTPUT;
#endif
	LED_DIR 			= OUTPUT;
     e0a:	26 9a       	sbi	0x04, 6	; 4

	LED			= 0;
     e0c:	2e 98       	cbi	0x05, 6	; 5
	RX_ROLL 	= 0;
     e0e:	49 98       	cbi	0x09, 1	; 9
	RX_PITCH 	= 0;
     e10:	4a 98       	cbi	0x09, 2	; 9
	RX_COLL  	= 0;
     e12:	4b 98       	cbi	0x09, 3	; 9
	RX_YAW   	= 0;
     e14:	1f 98       	cbi	0x03, 7	; 3

	// pin change interrupt enables
	PCICR |= (1 << PCIE0);			// PCINT0..7		
     e16:	80 91 68 00 	lds	r24, 0x0068
     e1a:	81 60       	ori	r24, 0x01	; 1
     e1c:	80 93 68 00 	sts	0x0068, r24
	PCICR |= (1 << PCIE2);			// PCINT16..23
     e20:	80 91 68 00 	lds	r24, 0x0068
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	80 93 68 00 	sts	0x0068, r24

	// pin change masks
	PCMSK0 |= (1 << PCINT7);		// PB7
     e2a:	80 91 6b 00 	lds	r24, 0x006B
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	80 93 6b 00 	sts	0x006B, r24
	PCMSK2 |= (1 << PCINT17);		// PD1
     e34:	80 91 6d 00 	lds	r24, 0x006D
     e38:	82 60       	ori	r24, 0x02	; 2
     e3a:	80 93 6d 00 	sts	0x006D, r24
	// external interrupts
	EICRA  = (1 << ISC00) | (1 << ISC10);	// Any change INT0, INT1
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	80 93 69 00 	sts	0x0069, r24
	EIMSK  = (1 << INT0) | (1 << INT1);		// External Interrupt Mask Register
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (1 << INTF0) | (1 << INTF1);
     e48:	8c b3       	in	r24, 0x1c	; 28
     e4a:	83 60       	ori	r24, 0x03	; 3
     e4c:	8c bb       	out	0x1c, r24	; 28

	// timer0 (8bit) - run @ 8MHz
	// used to control ESC/servo pulse length
	TCCR0A = 0;						// normal operation
     e4e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00);			// clk/0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0; 					// no interrupts
     e54:	10 92 6e 00 	sts	0x006E, r1

	// timer1 (16bit) - run @ 1Mhz
	// used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
     e58:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11);
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	80 93 81 00 	sts	0x0081, r24

	// timer2 8bit - run @ 8MHz / 1024 = 7812.5KHz
	// and Stick-Arming
	TCCR2A = 0;	
     e62:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);	// /1024
     e66:	87 e0       	ldi	r24, 0x07	; 7
     e68:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
     e6c:	10 92 70 00 	sts	0x0070, r1
	TIFR2  = 0;
     e70:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;		// reset counter
     e72:	10 92 b2 00 	sts	0x00B2, r1
	LowpassOutServo[1]		= 50;					// Yaw
#elif defined(TRI_COPTER)
	LowpassOutYaw			= 50;					// Center
#endif

	Initial_EEPROM_Config_Load();					// loads config at start-up 
     e76:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Initial_EEPROM_Config_Load>
	if (Armed) output_motor_ppm();		// output ESC signal
}

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     e7a:	8f e3       	ldi	r24, 0x3F	; 63
     e7c:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     e80:	10 92 7b 00 	sts	0x007B, r1

	Initial_EEPROM_Config_Load();					// loads config at start-up 

	Init_ADC();

	GyroCalibrated = false;
     e84:	10 92 23 01 	sts	0x0123, r1
	Armed = false;
     e88:	10 92 44 01 	sts	0x0144, r1
	RxChannelsUpdatingFlag = 0;
     e8c:	10 92 51 01 	sts	0x0151, r1

	RxChannel1 = Config.RxChannel1ZeroOffset;		// prime the channels 1520;
     e90:	80 91 5a 01 	lds	r24, 0x015A
     e94:	90 91 5b 01 	lds	r25, 0x015B
     e98:	90 93 53 01 	sts	0x0153, r25
     e9c:	80 93 52 01 	sts	0x0152, r24
	RxChannel2 = Config.RxChannel2ZeroOffset;		// 1520;
     ea0:	80 91 5c 01 	lds	r24, 0x015C
     ea4:	90 91 5d 01 	lds	r25, 0x015D
     ea8:	90 93 3b 01 	sts	0x013B, r25
     eac:	80 93 3a 01 	sts	0x013A, r24
	RxChannel3 = Config.RxChannel3ZeroOffset;		// 1120;
     eb0:	80 91 5e 01 	lds	r24, 0x015E
     eb4:	90 91 5f 01 	lds	r25, 0x015F
     eb8:	90 93 50 01 	sts	0x0150, r25
     ebc:	80 93 4f 01 	sts	0x014F, r24
	RxChannel4 = Config.RxChannel4ZeroOffset;		// 1520;
     ec0:	80 91 60 01 	lds	r24, 0x0160
     ec4:	90 91 61 01 	lds	r25, 0x0161
     ec8:	90 93 27 01 	sts	0x0127, r25
     ecc:	80 93 26 01 	sts	0x0126, r24

	// flash LED
	LED = 1;
     ed0:	2e 9a       	sbi	0x05, 6	; 5
	delay_ms(150);
     ed2:	86 e9       	ldi	r24, 0x96	; 150
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
	LED = 0;
     eda:	2e 98       	cbi	0x05, 6	; 5

	sei();											// Global Interrupts 
     edc:	78 94       	sei

	// 2 second delay
	delay_ms(1500);
     ede:	8c ed       	ldi	r24, 0xDC	; 220
     ee0:	95 e0       	ldi	r25, 0x05	; 5
     ee2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
	
	ReadGainPots();
     ee6:	0e 94 19 01 	call	0x232	; 0x232 <ReadGainPots>
	ReadGainPots();
     eea:	0e 94 19 01 	call	0x232	; 0x232 <ReadGainPots>

	// clear config
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100 && GainInADC[ROLL]  < (UC_ADC_MAX*5)/100 && GainInADC[YAW]   < (UC_ADC_MAX*5)/100 )
     eee:	80 91 49 01 	lds	r24, 0x0149
     ef2:	90 91 4a 01 	lds	r25, 0x014A
     ef6:	c3 97       	sbiw	r24, 0x33	; 51
     ef8:	08 f0       	brcs	.+2      	; 0xefc <setup+0x124>
     efa:	6d c0       	rjmp	.+218    	; 0xfd6 <setup+0x1fe>
     efc:	80 91 47 01 	lds	r24, 0x0147
     f00:	90 91 48 01 	lds	r25, 0x0148
     f04:	c3 97       	sbiw	r24, 0x33	; 51
     f06:	48 f4       	brcc	.+18     	; 0xf1a <setup+0x142>
     f08:	80 91 4b 01 	lds	r24, 0x014B
     f0c:	90 91 4c 01 	lds	r25, 0x014C
     f10:	c3 97       	sbiw	r24, 0x33	; 51
     f12:	18 f4       	brcc	.+6      	; 0xf1a <setup+0x142>
	{
		Set_EEPROM_Default_Config();
     f14:	0e 94 a9 03 	call	0x752	; 0x752 <Set_EEPROM_Default_Config>
     f18:	ff cf       	rjmp	.-2      	; 0xf18 <setup+0x140>

	// Stick Centering
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
	    // set offsets to zero (otherwise we affect what we want to calibrate !!)
	    Config.RxChannel1ZeroOffset  = 0;
     f1a:	10 92 5b 01 	sts	0x015B, r1
     f1e:	10 92 5a 01 	sts	0x015A, r1
	    Config.RxChannel2ZeroOffset  = 0;
     f22:	10 92 5d 01 	sts	0x015D, r1
     f26:	10 92 5c 01 	sts	0x015C, r1
	    Config.RxChannel4ZeroOffset  = 0;
     f2a:	10 92 61 01 	sts	0x0161, r1
     f2e:	10 92 60 01 	sts	0x0160, r1
     f32:	c0 e0       	ldi	r28, 0x00	; 0
     f34:	d0 e0       	ldi	r29, 0x00	; 0

		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     f36:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     f38:	89 e1       	ldi	r24, 0x19	; 25
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
			LED = 0;
     f40:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     f42:	89 e1       	ldi	r24, 0x19	; 25
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
	    Config.RxChannel1ZeroOffset  = 0;
	    Config.RxChannel2ZeroOffset  = 0;
	    Config.RxChannel4ZeroOffset  = 0;

		// flash LED 3 times
		for (i=0;i<3;i++)
     f4a:	21 96       	adiw	r28, 0x01	; 1
     f4c:	c3 30       	cpi	r28, 0x03	; 3
     f4e:	d1 05       	cpc	r29, r1
     f50:	91 f7       	brne	.-28     	; 0xf36 <setup+0x15e>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}
		// 5 Seconds Delay, for binding
		delay_ms(3750);
     f52:	86 ea       	ldi	r24, 0xA6	; 166
     f54:	9e e0       	ldi	r25, 0x0E	; 14
     f56:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
     f5a:	ee 24       	eor	r14, r14
     f5c:	ff 24       	eor	r15, r15
     f5e:	cc 24       	eor	r12, r12
     f60:	dd 24       	eor	r13, r13
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	d0 e0       	ldi	r29, 0x00	; 0
     f66:	00 e0       	ldi	r16, 0x00	; 0
     f68:	10 e0       	ldi	r17, 0x00	; 0

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
		{
	 		RxGetChannels();
     f6a:	0e 94 57 02 	call	0x4ae	; 0x4ae <RxGetChannels>

		    RxChannel1ZeroOffset += RxInRoll;
     f6e:	80 91 28 01 	lds	r24, 0x0128
     f72:	90 91 29 01 	lds	r25, 0x0129
     f76:	08 0f       	add	r16, r24
     f78:	19 1f       	adc	r17, r25
		    RxChannel2ZeroOffset += RxInPitch;
     f7a:	80 91 42 01 	lds	r24, 0x0142
     f7e:	90 91 43 01 	lds	r25, 0x0143
     f82:	e8 0e       	add	r14, r24
     f84:	f9 1e       	adc	r15, r25
		    RxChannel4ZeroOffset += RxInYaw;
     f86:	80 91 2a 01 	lds	r24, 0x012A
     f8a:	90 91 2b 01 	lds	r25, 0x012B
     f8e:	c8 0e       	add	r12, r24
     f90:	d9 1e       	adc	r13, r25

			delay_ms(100);
     f92:	84 e6       	ldi	r24, 0x64	; 100
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
		// 5 Seconds Delay, for binding
		delay_ms(3750);

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
     f9a:	21 96       	adiw	r28, 0x01	; 1
     f9c:	c4 30       	cpi	r28, 0x04	; 4
     f9e:	d1 05       	cpc	r29, r1
     fa0:	21 f7       	brne	.-56     	; 0xf6a <setup+0x192>
		    RxChannel4ZeroOffset += RxInYaw;

			delay_ms(100);
		}
		// nb RxGetChannels() divides RxInXXX by 4 so we won't here
	    Config.RxChannel1ZeroOffset  = RxChannel1ZeroOffset;
     fa2:	10 93 5b 01 	sts	0x015B, r17
     fa6:	00 93 5a 01 	sts	0x015A, r16
	    Config.RxChannel2ZeroOffset  = RxChannel2ZeroOffset;
     faa:	f0 92 5d 01 	sts	0x015D, r15
     fae:	e0 92 5c 01 	sts	0x015C, r14
	    Config.RxChannel3ZeroOffset  = 1120;
     fb2:	80 e6       	ldi	r24, 0x60	; 96
     fb4:	94 e0       	ldi	r25, 0x04	; 4
     fb6:	90 93 5f 01 	sts	0x015F, r25
     fba:	80 93 5e 01 	sts	0x015E, r24
	    Config.RxChannel4ZeroOffset  = RxChannel4ZeroOffset;
     fbe:	d0 92 61 01 	sts	0x0161, r13
     fc2:	c0 92 60 01 	sts	0x0160, r12

		// Store gyro direction to EEPROM
		Save_Config_to_EEPROM();
     fc6:	0e 94 ca 06 	call	0xd94	; 0xd94 <Save_Config_to_EEPROM>

		// flash LED, Ending Sign
		LED = 1;
     fca:	2e 9a       	sbi	0x05, 6	; 5
		delay_ms(150);
     fcc:	86 e9       	ldi	r24, 0x96	; 150
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
		LED = 0;
     fd4:	2e 98       	cbi	0x05, 6	; 5
	}


	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
     fd6:	80 91 47 01 	lds	r24, 0x0147
     fda:	90 91 48 01 	lds	r25, 0x0148
     fde:	c3 97       	sbiw	r24, 0x33	; 51
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <setup+0x20c>
     fe2:	50 c0       	rjmp	.+160    	; 0x1084 <setup+0x2ac>
     fe4:	c0 e0       	ldi	r28, 0x00	; 0
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     fe8:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     fea:	89 e1       	ldi	r24, 0x19	; 25
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
			LED = 0;
     ff2:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     ff4:	89 e1       	ldi	r24, 0x19	; 25
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>

	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
     ffc:	21 96       	adiw	r28, 0x01	; 1
     ffe:	c3 30       	cpi	r28, 0x03	; 3
    1000:	d1 05       	cpc	r29, r1
    1002:	91 f7       	brne	.-28     	; 0xfe8 <setup+0x210>
			} else if (RxInYaw < -30) { // normal(left)
				Config.YawGyroDirection = GYRO_NORMAL;
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
				Config.YawGyroDirection = GYRO_REVERSED;
    1004:	11 e0       	ldi	r17, 0x01	; 1
			delay_ms(25);
		}

		while(1)
		{
			RxGetChannels();
    1006:	0e 94 57 02 	call	0x4ae	; 0x4ae <RxGetChannels>

			if (RxInRoll < -30) {	// normal(left)
    100a:	80 91 28 01 	lds	r24, 0x0128
    100e:	90 91 29 01 	lds	r25, 0x0129
    1012:	82 5e       	subi	r24, 0xE2	; 226
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	2c f4       	brge	.+10     	; 0x1022 <setup+0x24a>
				Config.RollGyroDirection = GYRO_NORMAL;
    1018:	10 92 57 01 	sts	0x0157, r1
				Save_Config_to_EEPROM();
    101c:	0e 94 ca 06 	call	0xd94	; 0xd94 <Save_Config_to_EEPROM>
				LED = 1;
    1020:	2e 9a       	sbi	0x05, 6	; 5
			} if (RxInRoll > 30) {	// reverse(right)
    1022:	80 91 28 01 	lds	r24, 0x0128
    1026:	90 91 29 01 	lds	r25, 0x0129
    102a:	4f 97       	sbiw	r24, 0x1f	; 31
    102c:	1c f0       	brlt	.+6      	; 0x1034 <setup+0x25c>
				Config.RollGyroDirection = GYRO_REVERSED;
    102e:	10 93 57 01 	sts	0x0157, r17
    1032:	1f c0       	rjmp	.+62     	; 0x1072 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch < -30) { // normal(up)
    1034:	80 91 42 01 	lds	r24, 0x0142
    1038:	90 91 43 01 	lds	r25, 0x0143
    103c:	2f ef       	ldi	r18, 0xFF	; 255
    103e:	82 3e       	cpi	r24, 0xE2	; 226
    1040:	92 07       	cpc	r25, r18
    1042:	1c f4       	brge	.+6      	; 0x104a <setup+0x272>
				Config.PitchGyroDirection = GYRO_NORMAL;
    1044:	10 92 58 01 	sts	0x0158, r1
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch > 30) { // reverse(down)
    104a:	4f 97       	sbiw	r24, 0x1f	; 31
    104c:	1c f0       	brlt	.+6      	; 0x1054 <setup+0x27c>
				Config.PitchGyroDirection = GYRO_REVERSED;
    104e:	10 93 58 01 	sts	0x0158, r17
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw < -30) { // normal(left)
    1054:	80 91 2a 01 	lds	r24, 0x012A
    1058:	90 91 2b 01 	lds	r25, 0x012B
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	82 3e       	cpi	r24, 0xE2	; 226
    1060:	92 07       	cpc	r25, r18
    1062:	1c f4       	brge	.+6      	; 0x106a <setup+0x292>
				Config.YawGyroDirection = GYRO_NORMAL;
    1064:	10 92 59 01 	sts	0x0159, r1
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
    106a:	4f 97       	sbiw	r24, 0x1f	; 31
    106c:	2c f0       	brlt	.+10     	; 0x1078 <setup+0x2a0>
				Config.YawGyroDirection = GYRO_REVERSED;
    106e:	10 93 59 01 	sts	0x0159, r17
				Save_Config_to_EEPROM();
    1072:	0e 94 ca 06 	call	0xd94	; 0xd94 <Save_Config_to_EEPROM>
				LED = 1;
    1076:	2e 9a       	sbi	0x05, 6	; 5
			}
	
			delay_ms(50);
    1078:	82 e3       	ldi	r24, 0x32	; 50
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
			LED = 0;
    1080:	2e 98       	cbi	0x05, 6	; 5
    1082:	c1 cf       	rjmp	.-126    	; 0x1006 <setup+0x22e>

		}
	}

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
    1084:	80 91 4b 01 	lds	r24, 0x014B
    1088:	90 91 4c 01 	lds	r25, 0x014C
    108c:	c3 97       	sbiw	r24, 0x33	; 51
    108e:	90 f5       	brcc	.+100    	; 0x10f4 <setup+0x31c>
    1090:	c0 e0       	ldi	r28, 0x00	; 0
    1092:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
    1094:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
    1096:	89 e1       	ldi	r24, 0x19	; 25
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>
			LED = 0;
    109e:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
    10a0:	89 e1       	ldi	r24, 0x19	; 25
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <delay_ms>

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	c3 30       	cpi	r28, 0x03	; 3
    10ac:	d1 05       	cpc	r29, r1
    10ae:	91 f7       	brne	.-28     	; 0x1094 <setup+0x2bc>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}

		Armed = true;	// override so that output_motor_pwm() won't quit early
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 44 01 	sts	0x0144, r24
		PWM_Low_Pulse_Interval = ((1000000UL / 50) - 2000)/10;	// set to 50Hz
    10b6:	88 e0       	ldi	r24, 0x08	; 8
    10b8:	97 e0       	ldi	r25, 0x07	; 7
    10ba:	90 93 01 01 	sts	0x0101, r25
    10be:	80 93 00 01 	sts	0x0100, r24
		ServoPPMRateDivider = 1;	// since we have already set to 50Hz
#endif
		
		while (1)	// loop forever
		{
			RxGetChannels();
    10c2:	0e 94 57 02 	call	0x4ae	; 0x4ae <RxGetChannels>
			MotorOut2 = RxInCollective;
			MotorOut3 = RxInCollective;
			MotorOut4 = 50;			// Center: 50
			MotorOut5 = 50;			// Center: 50, Reverse
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER) || defined(Y4_COPTER)
			MotorOut1 = RxInCollective;
    10c6:	80 91 19 01 	lds	r24, 0x0119
    10ca:	90 91 1a 01 	lds	r25, 0x011A
    10ce:	90 93 22 01 	sts	0x0122, r25
    10d2:	80 93 21 01 	sts	0x0121, r24
			MotorOut2 = RxInCollective;
    10d6:	90 93 2d 01 	sts	0x012D, r25
    10da:	80 93 2c 01 	sts	0x012C, r24
			MotorOut3 = RxInCollective;
    10de:	90 93 3f 01 	sts	0x013F, r25
    10e2:	80 93 3e 01 	sts	0x013E, r24
			MotorOut4 = RxInCollective;
    10e6:	90 93 33 01 	sts	0x0133, r25
    10ea:	80 93 32 01 	sts	0x0132, r24
			MotorOut6 = RxInCollective;
#else
#error No Copter configuration defined !!!!
#endif

			output_motor_ppm();	// this regulates rate at which we output signals
    10ee:	0e 94 b5 02 	call	0x56a	; 0x56a <output_motor_ppm>
    10f2:	e7 cf       	rjmp	.-50     	; 0x10c2 <setup+0x2ea>
		}
	}
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	08 95       	ret

00001106 <main>:
}


int main(void)
{
	setup();
    1106:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <setup>

	while (1)
	{
		loop();
    110a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <loop>
    110e:	fd cf       	rjmp	.-6      	; 0x110a <main+0x4>

00001110 <__udivmodhi4>:
    1110:	aa 1b       	sub	r26, r26
    1112:	bb 1b       	sub	r27, r27
    1114:	51 e1       	ldi	r21, 0x11	; 17
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <__udivmodhi4_ep>

00001118 <__udivmodhi4_loop>:
    1118:	aa 1f       	adc	r26, r26
    111a:	bb 1f       	adc	r27, r27
    111c:	a6 17       	cp	r26, r22
    111e:	b7 07       	cpc	r27, r23
    1120:	10 f0       	brcs	.+4      	; 0x1126 <__udivmodhi4_ep>
    1122:	a6 1b       	sub	r26, r22
    1124:	b7 0b       	sbc	r27, r23

00001126 <__udivmodhi4_ep>:
    1126:	88 1f       	adc	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	5a 95       	dec	r21
    112c:	a9 f7       	brne	.-22     	; 0x1118 <__udivmodhi4_loop>
    112e:	80 95       	com	r24
    1130:	90 95       	com	r25
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	08 95       	ret

00001138 <__divmodhi4>:
    1138:	97 fb       	bst	r25, 7
    113a:	09 2e       	mov	r0, r25
    113c:	07 26       	eor	r0, r23
    113e:	0a d0       	rcall	.+20     	; 0x1154 <__divmodhi4_neg1>
    1140:	77 fd       	sbrc	r23, 7
    1142:	04 d0       	rcall	.+8      	; 0x114c <__divmodhi4_neg2>
    1144:	e5 df       	rcall	.-54     	; 0x1110 <__udivmodhi4>
    1146:	06 d0       	rcall	.+12     	; 0x1154 <__divmodhi4_neg1>
    1148:	00 20       	and	r0, r0
    114a:	1a f4       	brpl	.+6      	; 0x1152 <__divmodhi4_exit>

0000114c <__divmodhi4_neg2>:
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255

00001152 <__divmodhi4_exit>:
    1152:	08 95       	ret

00001154 <__divmodhi4_neg1>:
    1154:	f6 f7       	brtc	.-4      	; 0x1152 <__divmodhi4_exit>
    1156:	90 95       	com	r25
    1158:	81 95       	neg	r24
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__eerd_block_m168p>:
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22

00001162 <__eerd_blraw_m168p>:
    1162:	fc 01       	movw	r30, r24
    1164:	f9 99       	sbic	0x1f, 1	; 31
    1166:	fe cf       	rjmp	.-4      	; 0x1164 <__eerd_blraw_m168p+0x2>
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <__eerd_blraw_m168p+0x14>
    116a:	f2 bd       	out	0x22, r31	; 34
    116c:	e1 bd       	out	0x21, r30	; 33
    116e:	f8 9a       	sbi	0x1f, 0	; 31
    1170:	31 96       	adiw	r30, 0x01	; 1
    1172:	00 b4       	in	r0, 0x20	; 32
    1174:	0d 92       	st	X+, r0
    1176:	41 50       	subi	r20, 0x01	; 1
    1178:	50 40       	sbci	r21, 0x00	; 0
    117a:	b8 f7       	brcc	.-18     	; 0x116a <__eerd_blraw_m168p+0x8>
    117c:	08 95       	ret

0000117e <__eerd_byte_m168p>:
    117e:	f9 99       	sbic	0x1f, 1	; 31
    1180:	fe cf       	rjmp	.-4      	; 0x117e <__eerd_byte_m168p>
    1182:	92 bd       	out	0x22, r25	; 34
    1184:	81 bd       	out	0x21, r24	; 33
    1186:	f8 9a       	sbi	0x1f, 0	; 31
    1188:	99 27       	eor	r25, r25
    118a:	80 b5       	in	r24, 0x20	; 32
    118c:	08 95       	ret

0000118e <__eewr_byte_m168p>:
    118e:	26 2f       	mov	r18, r22

00001190 <__eewr_r18_m168p>:
    1190:	f9 99       	sbic	0x1f, 1	; 31
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <__eewr_r18_m168p>
    1194:	1f ba       	out	0x1f, r1	; 31
    1196:	92 bd       	out	0x22, r25	; 34
    1198:	81 bd       	out	0x21, r24	; 33
    119a:	20 bd       	out	0x20, r18	; 32
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	fa 9a       	sbi	0x1f, 2	; 31
    11a2:	f9 9a       	sbi	0x1f, 1	; 31
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	08 95       	ret

000011aa <_exit>:
    11aa:	f8 94       	cli

000011ac <__stop_program>:
    11ac:	ff cf       	rjmp	.-2      	; 0x11ac <__stop_program>
